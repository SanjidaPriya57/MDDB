{"metadata":{"kernelspec":{"language":"python","display_name":"Python 3","name":"python3"},"language_info":{"name":"python","version":"3.10.12","mimetype":"text/x-python","codemirror_mode":{"name":"ipython","version":3},"pygments_lexer":"ipython3","nbconvert_exporter":"python","file_extension":".py"},"kaggle":{"accelerator":"nvidiaTeslaT4","dataSources":[{"sourceId":11135603,"sourceType":"datasetVersion","datasetId":6945370}],"dockerImageVersionId":30919,"isInternetEnabled":true,"language":"python","sourceType":"notebook","isGpuEnabled":true}},"nbformat_minor":4,"nbformat":4,"cells":[{"cell_type":"code","source":"!pip list | grep \"torch\\|tensorflow\\|transformers\\|opencv\\|scikit-learn\"\n","metadata":{"_uuid":"8f2839f25d086af736a60e9eeb907d3b93b6e0e5","_cell_guid":"b1076dfc-b9ad-4769-8c92-a6c4dae69d19","trusted":true,"execution":{"iopub.status.busy":"2025-03-23T15:53:05.405412Z","iopub.execute_input":"2025-03-23T15:53:05.405748Z","iopub.status.idle":"2025-03-23T15:53:06.658743Z","shell.execute_reply.started":"2025-03-23T15:53:05.405724Z","shell.execute_reply":"2025-03-23T15:53:06.657878Z"}},"outputs":[{"name":"stdout","text":"opencv-contrib-python              4.10.0.84\nopencv-python                      4.10.0.84\nopencv-python-headless             4.10.0.84\npytorch-ignite                     0.5.1\npytorch-lightning                  2.5.0.post0\nscikit-learn                       1.2.2\nscikit-learn-intelex               2025.2.0\nsentence-transformers              3.3.1\ntensorflow                         2.17.1\ntensorflow-cloud                   0.1.5\ntensorflow-datasets                4.9.7\ntensorflow_decision_forests        1.10.0\ntensorflow-hub                     0.16.1\ntensorflow-io                      0.37.1\ntensorflow-io-gcs-filesystem       0.37.1\ntensorflow-metadata                1.13.1\ntensorflow-probability             0.24.0\ntensorflow-text                    2.17.0\ntorch                              2.5.1+cu121\ntorchaudio                         2.5.1+cu121\ntorchinfo                          1.8.0\ntorchmetrics                       1.6.1\ntorchsummary                       1.5.1\ntorchtune                          0.5.0\ntorchvision                        0.20.1+cu121\ntransformers                       4.47.0\n","output_type":"stream"}],"execution_count":24},{"cell_type":"code","source":"!apt-get update\n!apt-get install -y fonts-noto\n","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-03-23T15:53:06.660371Z","iopub.execute_input":"2025-03-23T15:53:06.660722Z","iopub.status.idle":"2025-03-23T15:53:11.703281Z","shell.execute_reply.started":"2025-03-23T15:53:06.660687Z","shell.execute_reply":"2025-03-23T15:53:11.702293Z"}},"outputs":[{"name":"stdout","text":"Hit:1 https://developer.download.nvidia.com/compute/cuda/repos/ubuntu2204/x86_64  InRelease\nHit:2 https://cloud.r-project.org/bin/linux/ubuntu jammy-cran40/ InRelease                          \nGet:3 https://r2u.stat.illinois.edu/ubuntu jammy InRelease [6,555 B]                                \nHit:4 http://archive.ubuntu.com/ubuntu jammy InRelease                                              \nGet:5 http://security.ubuntu.com/ubuntu jammy-security InRelease [129 kB]                           \nHit:6 http://archive.ubuntu.com/ubuntu jammy-updates InRelease                                      \nGet:7 https://r2u.stat.illinois.edu/ubuntu jammy/main all Packages [8,769 kB]  \nHit:8 http://archive.ubuntu.com/ubuntu jammy-backports InRelease                                    \nHit:9 https://ppa.launchpadcontent.net/deadsnakes/ppa/ubuntu jammy InRelease                        \nHit:10 https://ppa.launchpadcontent.net/graphics-drivers/ppa/ubuntu jammy InRelease      \nGet:11 https://r2u.stat.illinois.edu/ubuntu jammy/main amd64 Packages [2,683 kB]\nHit:12 https://ppa.launchpadcontent.net/ubuntugis/ppa/ubuntu jammy InRelease     \nFetched 11.6 MB in 1s (9,023 kB/s)             \nReading package lists... Done\nW: Skipping acquire of configured file 'main/source/Sources' as repository 'https://r2u.stat.illinois.edu/ubuntu jammy InRelease' does not seem to provide it (sources.list entry misspelt?)\nReading package lists... Done\nBuilding dependency tree... Done\nReading state information... Done\nfonts-noto is already the newest version (20201225-1build1).\n0 upgraded, 0 newly installed, 0 to remove and 161 not upgraded.\n","output_type":"stream"}],"execution_count":25},{"cell_type":"code","source":"!pip install torch torchvision transformers opencv-python scikit-learn","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-03-23T15:53:11.705060Z","iopub.execute_input":"2025-03-23T15:53:11.705350Z","iopub.status.idle":"2025-03-23T15:53:15.170792Z","shell.execute_reply.started":"2025-03-23T15:53:11.705326Z","shell.execute_reply":"2025-03-23T15:53:15.169772Z"}},"outputs":[{"name":"stdout","text":"Requirement already satisfied: torch in /usr/local/lib/python3.10/dist-packages (2.5.1+cu121)\nRequirement already satisfied: torchvision in /usr/local/lib/python3.10/dist-packages (0.20.1+cu121)\nRequirement already satisfied: transformers in /usr/local/lib/python3.10/dist-packages (4.47.0)\nRequirement already satisfied: opencv-python in /usr/local/lib/python3.10/dist-packages (4.10.0.84)\nRequirement already satisfied: scikit-learn in /usr/local/lib/python3.10/dist-packages (1.2.2)\nRequirement already satisfied: filelock in /usr/local/lib/python3.10/dist-packages (from torch) (3.17.0)\nRequirement already satisfied: typing-extensions>=4.8.0 in /usr/local/lib/python3.10/dist-packages (from torch) (4.12.2)\nRequirement already satisfied: networkx in /usr/local/lib/python3.10/dist-packages (from torch) (3.4.2)\nRequirement already satisfied: jinja2 in /usr/local/lib/python3.10/dist-packages (from torch) (3.1.4)\nRequirement already satisfied: fsspec in /usr/local/lib/python3.10/dist-packages (from torch) (2024.12.0)\nRequirement already satisfied: sympy==1.13.1 in /usr/local/lib/python3.10/dist-packages (from torch) (1.13.1)\nRequirement already satisfied: mpmath<1.4,>=1.1.0 in /usr/local/lib/python3.10/dist-packages (from sympy==1.13.1->torch) (1.3.0)\nRequirement already satisfied: numpy in /usr/local/lib/python3.10/dist-packages (from torchvision) (1.26.4)\nRequirement already satisfied: pillow!=8.3.*,>=5.3.0 in /usr/local/lib/python3.10/dist-packages (from torchvision) (11.0.0)\nRequirement already satisfied: huggingface-hub<1.0,>=0.24.0 in /usr/local/lib/python3.10/dist-packages (from transformers) (0.29.0)\nRequirement already satisfied: packaging>=20.0 in /usr/local/lib/python3.10/dist-packages (from transformers) (24.2)\nRequirement already satisfied: pyyaml>=5.1 in /usr/local/lib/python3.10/dist-packages (from transformers) (6.0.2)\nRequirement already satisfied: regex!=2019.12.17 in /usr/local/lib/python3.10/dist-packages (from transformers) (2024.11.6)\nRequirement already satisfied: requests in /usr/local/lib/python3.10/dist-packages (from transformers) (2.32.3)\nRequirement already satisfied: tokenizers<0.22,>=0.21 in /usr/local/lib/python3.10/dist-packages (from transformers) (0.21.0)\nRequirement already satisfied: safetensors>=0.4.1 in /usr/local/lib/python3.10/dist-packages (from transformers) (0.4.5)\nRequirement already satisfied: tqdm>=4.27 in /usr/local/lib/python3.10/dist-packages (from transformers) (4.67.1)\nRequirement already satisfied: scipy>=1.3.2 in /usr/local/lib/python3.10/dist-packages (from scikit-learn) (1.13.1)\nRequirement already satisfied: joblib>=1.1.1 in /usr/local/lib/python3.10/dist-packages (from scikit-learn) (1.4.2)\nRequirement already satisfied: threadpoolctl>=2.0.0 in /usr/local/lib/python3.10/dist-packages (from scikit-learn) (3.5.0)\nRequirement already satisfied: mkl_fft in /usr/local/lib/python3.10/dist-packages (from numpy->torchvision) (1.3.8)\nRequirement already satisfied: mkl_random in /usr/local/lib/python3.10/dist-packages (from numpy->torchvision) (1.2.4)\nRequirement already satisfied: mkl_umath in /usr/local/lib/python3.10/dist-packages (from numpy->torchvision) (0.1.1)\nRequirement already satisfied: mkl in /usr/local/lib/python3.10/dist-packages (from numpy->torchvision) (2025.0.1)\nRequirement already satisfied: tbb4py in /usr/local/lib/python3.10/dist-packages (from numpy->torchvision) (2022.0.0)\nRequirement already satisfied: mkl-service in /usr/local/lib/python3.10/dist-packages (from numpy->torchvision) (2.4.1)\nRequirement already satisfied: MarkupSafe>=2.0 in /usr/local/lib/python3.10/dist-packages (from jinja2->torch) (3.0.2)\nRequirement already satisfied: charset-normalizer<4,>=2 in /usr/local/lib/python3.10/dist-packages (from requests->transformers) (3.4.1)\nRequirement already satisfied: idna<4,>=2.5 in /usr/local/lib/python3.10/dist-packages (from requests->transformers) (3.10)\nRequirement already satisfied: urllib3<3,>=1.21.1 in /usr/local/lib/python3.10/dist-packages (from requests->transformers) (2.3.0)\nRequirement already satisfied: certifi>=2017.4.17 in /usr/local/lib/python3.10/dist-packages (from requests->transformers) (2025.1.31)\nRequirement already satisfied: intel-openmp>=2024 in /usr/local/lib/python3.10/dist-packages (from mkl->numpy->torchvision) (2024.2.0)\nRequirement already satisfied: tbb==2022.* in /usr/local/lib/python3.10/dist-packages (from mkl->numpy->torchvision) (2022.0.0)\nRequirement already satisfied: tcmlib==1.* in /usr/local/lib/python3.10/dist-packages (from tbb==2022.*->mkl->numpy->torchvision) (1.2.0)\nRequirement already satisfied: intel-cmplr-lib-rt in /usr/local/lib/python3.10/dist-packages (from mkl_umath->numpy->torchvision) (2024.2.0)\nRequirement already satisfied: intel-cmplr-lib-ur==2024.2.0 in /usr/local/lib/python3.10/dist-packages (from intel-openmp>=2024->mkl->numpy->torchvision) (2024.2.0)\n","output_type":"stream"}],"execution_count":26},{"cell_type":"code","source":"import os\n\n# Check the dataset directory\n!ls /kaggle/input/multimodal-disaster-dataset-bangla/","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-03-23T15:53:15.172496Z","iopub.execute_input":"2025-03-23T15:53:15.172763Z","iopub.status.idle":"2025-03-23T15:53:15.335519Z","shell.execute_reply.started":"2025-03-23T15:53:15.172741Z","shell.execute_reply":"2025-03-23T15:53:15.334594Z"}},"outputs":[{"name":"stdout","text":"ls: cannot access '/kaggle/input/multimodal-disaster-dataset-bangla/Multimodal': No such file or directory\nls: cannot access 'Disaster': No such file or directory\nls: cannot access 'Bangla': No such file or directory\nls: cannot access 'Dataset/Photos_Final': No such file or directory\n","output_type":"stream"}],"execution_count":27},{"cell_type":"code","source":"import pandas as pd\n\n# Load the CSV file\ncsv_path = '/kaggle/input/multimodal-disaster-dataset-bangla/Multimodal Disaster Bangla Dataset/Thesis.csv'\ndf = pd.read_csv(csv_path,encoding=\"utf-8\")\ndf.head()\n","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-03-23T15:53:15.336619Z","iopub.execute_input":"2025-03-23T15:53:15.336975Z","iopub.status.idle":"2025-03-23T15:53:15.365827Z","shell.execute_reply.started":"2025-03-23T15:53:15.336947Z","shell.execute_reply":"2025-03-23T15:53:15.365121Z"}},"outputs":[{"execution_count":28,"output_type":"execute_result","data":{"text/plain":"    id                                            caption  label  level  \\\n0    1  গোমতী নদীর পানি উত্তর পাশে পালপাড়া অংশে বাঁধ থ...  flood      1   \n1    2  গোমতী নদীর পানি উত্তর পাশে পালপাড়া অংশে বাঁধ থ...  flood      1   \n2    3                                           কুমিল্লা  flood      1   \n3    4  আখাউড়া উপজেলা ও কসবা উপজেলা'র বিভিন্ন এলাকায় ই...  flood      1   \n4    5  ফেনীর মুহুরী নদীতে পানির মাত্রা গত ৪০ বছরের ইত...  flood      1   \n\n       area Unnamed: 5  \n0  কুমিল্লা        NaN  \n1  কুমিল্লা        NaN  \n2  কুমিল্লা        NaN  \n3   আখাউড়া         NaN  \n4      ফেনী        NaN  ","text/html":"<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>id</th>\n      <th>caption</th>\n      <th>label</th>\n      <th>level</th>\n      <th>area</th>\n      <th>Unnamed: 5</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>1</td>\n      <td>গোমতী নদীর পানি উত্তর পাশে পালপাড়া অংশে বাঁধ থ...</td>\n      <td>flood</td>\n      <td>1</td>\n      <td>কুমিল্লা</td>\n      <td>NaN</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>2</td>\n      <td>গোমতী নদীর পানি উত্তর পাশে পালপাড়া অংশে বাঁধ থ...</td>\n      <td>flood</td>\n      <td>1</td>\n      <td>কুমিল্লা</td>\n      <td>NaN</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>3</td>\n      <td>কুমিল্লা</td>\n      <td>flood</td>\n      <td>1</td>\n      <td>কুমিল্লা</td>\n      <td>NaN</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>4</td>\n      <td>আখাউড়া উপজেলা ও কসবা উপজেলা'র বিভিন্ন এলাকায় ই...</td>\n      <td>flood</td>\n      <td>1</td>\n      <td>আখাউড়া</td>\n      <td>NaN</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>5</td>\n      <td>ফেনীর মুহুরী নদীতে পানির মাত্রা গত ৪০ বছরের ইত...</td>\n      <td>flood</td>\n      <td>1</td>\n      <td>ফেনী</td>\n      <td>NaN</td>\n    </tr>\n  </tbody>\n</table>\n</div>"},"metadata":{}}],"execution_count":28},{"cell_type":"code","source":"# Verify column names\nprint(df.columns)","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-03-23T15:53:15.366849Z","iopub.execute_input":"2025-03-23T15:53:15.367196Z","iopub.status.idle":"2025-03-23T15:53:15.371769Z","shell.execute_reply.started":"2025-03-23T15:53:15.367162Z","shell.execute_reply":"2025-03-23T15:53:15.371002Z"}},"outputs":[{"name":"stdout","text":"Index([' id', 'caption', 'label', 'level', 'area', 'Unnamed: 5'], dtype='object')\n","output_type":"stream"}],"execution_count":29},{"cell_type":"code","source":"import pandas as pd\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.utils import shuffle\nimport torch\nfrom torch.utils.data import Dataset, DataLoader\nfrom transformers import BertTokenizer\nfrom torchvision import transforms\nfrom PIL import Image\nimport os","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-03-23T15:53:15.372687Z","iopub.execute_input":"2025-03-23T15:53:15.372916Z","iopub.status.idle":"2025-03-23T15:53:15.387919Z","shell.execute_reply.started":"2025-03-23T15:53:15.372883Z","shell.execute_reply":"2025-03-23T15:53:15.387073Z"}},"outputs":[],"execution_count":30},{"cell_type":"code","source":"# Drop unnecessary columns if they exist\ncolumns_to_drop = [col for col in ['label', 'area', 'Unnamed: 5'] if col in df.columns]\ndf = df.drop(columns_to_drop, axis=1)\n\n# Shuffle the dataframe\ndf = shuffle(df, random_state=42)","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-03-23T15:53:15.390703Z","iopub.execute_input":"2025-03-23T15:53:15.390938Z","iopub.status.idle":"2025-03-23T15:53:15.401970Z","shell.execute_reply.started":"2025-03-23T15:53:15.390916Z","shell.execute_reply":"2025-03-23T15:53:15.401147Z"}},"outputs":[],"execution_count":31},{"cell_type":"code","source":"df.head()","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-03-23T15:53:15.403616Z","iopub.execute_input":"2025-03-23T15:53:15.403910Z","iopub.status.idle":"2025-03-23T15:53:15.417307Z","shell.execute_reply.started":"2025-03-23T15:53:15.403888Z","shell.execute_reply":"2025-03-23T15:53:15.416431Z"}},"outputs":[{"execution_count":32,"output_type":"execute_result","data":{"text/plain":"        id                                            caption  level\n2482  2483  এরকম কত বৃষ্টি আসবে আর যাবে , কিন্তু আকাশ একাই...      0\n942    943  নদীভাঙনে হারিয়ে যাওয়া মানুষের সংখ্যা বাড়ছে প্র...      1\n2335  2336  বয়ফ্রেন্ডকে ট্রিট দিলে ১০% ডিসকাউন্ট ! বয়ফ্রেন...      0\n450    451  “বৃষ্টির সাথে এসে থামল ঘূর্ণিঝড়। প্রায় ৪০০০ ...      1\n2184  2185  আপনি কি জানেন ? হোয়াইট সস দিয়ে পিজ্জা খেলে কান...      0","text/html":"<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>id</th>\n      <th>caption</th>\n      <th>level</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>2482</th>\n      <td>2483</td>\n      <td>এরকম কত বৃষ্টি আসবে আর যাবে , কিন্তু আকাশ একাই...</td>\n      <td>0</td>\n    </tr>\n    <tr>\n      <th>942</th>\n      <td>943</td>\n      <td>নদীভাঙনে হারিয়ে যাওয়া মানুষের সংখ্যা বাড়ছে প্র...</td>\n      <td>1</td>\n    </tr>\n    <tr>\n      <th>2335</th>\n      <td>2336</td>\n      <td>বয়ফ্রেন্ডকে ট্রিট দিলে ১০% ডিসকাউন্ট ! বয়ফ্রেন...</td>\n      <td>0</td>\n    </tr>\n    <tr>\n      <th>450</th>\n      <td>451</td>\n      <td>“বৃষ্টির সাথে এসে থামল ঘূর্ণিঝড়। প্রায় ৪০০০ ...</td>\n      <td>1</td>\n    </tr>\n    <tr>\n      <th>2184</th>\n      <td>2185</td>\n      <td>আপনি কি জানেন ? হোয়াইট সস দিয়ে পিজ্জা খেলে কান...</td>\n      <td>0</td>\n    </tr>\n  </tbody>\n</table>\n</div>"},"metadata":{}}],"execution_count":32},{"cell_type":"code","source":"# Split the dataset\ntrain_ratio = 0.6\nval_ratio = 0.2\ntest_ratio = 0.2\n\ntrain_data, val_test = train_test_split(df, train_size=train_ratio, random_state=42)\nvalid_data, test_data = train_test_split(val_test, train_size=val_ratio / (val_ratio + test_ratio), random_state=42)","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-03-23T15:53:15.418189Z","iopub.execute_input":"2025-03-23T15:53:15.418558Z","iopub.status.idle":"2025-03-23T15:53:15.430704Z","shell.execute_reply.started":"2025-03-23T15:53:15.418534Z","shell.execute_reply":"2025-03-23T15:53:15.429995Z"}},"outputs":[],"execution_count":33},{"cell_type":"code","source":"train_data.columns = train_data.columns.str.strip()\nvalid_data.columns = valid_data.columns.str.strip()\ntest_data.columns = test_data.columns.str.strip()\n","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-03-23T15:53:15.431513Z","iopub.execute_input":"2025-03-23T15:53:15.431723Z","iopub.status.idle":"2025-03-23T15:53:15.440856Z","shell.execute_reply.started":"2025-03-23T15:53:15.431706Z","shell.execute_reply":"2025-03-23T15:53:15.440112Z"}},"outputs":[],"execution_count":34},{"cell_type":"code","source":"# Define the transformations for the images\nimage_transforms = transforms.Compose([\n    transforms.Resize((224, 224)),\n    transforms.ToTensor(),\n    transforms.Normalize(mean=[0.485, 0.456, 0.406], std=[0.229, 0.224, 0.225])\n])\n\n# Load the tokenizer\ntokenizer = BertTokenizer.from_pretrained('csebuetnlp/banglabert')\n\n","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-03-23T15:53:15.441678Z","iopub.execute_input":"2025-03-23T15:53:15.441944Z","iopub.status.idle":"2025-03-23T15:53:15.632846Z","shell.execute_reply.started":"2025-03-23T15:53:15.441922Z","shell.execute_reply":"2025-03-23T15:53:15.632207Z"}},"outputs":[{"name":"stderr","text":"The tokenizer class you load from this checkpoint is not the same type as the class this function is called from. It may result in unexpected tokenization. \nThe tokenizer class you load from this checkpoint is 'ElectraTokenizer'. \nThe class this function is called from is 'BertTokenizer'.\n","output_type":"stream"}],"execution_count":35},{"cell_type":"code","source":"# Custom Dataset class\nclass MultimodalDataset(Dataset):\n    def __init__(self, dataframe, images_folder, tokenizer, image_transforms):\n        self.dataframe = dataframe\n        self.images_folder = images_folder\n        self.tokenizer = tokenizer\n        self.image_transforms = image_transforms\n\n    def __len__(self):\n        return len(self.dataframe)\n\n    def __getitem__(self, idx):\n        row = self.dataframe.iloc[idx]\n        text = row['caption']\n        label = row['level']\n        image_id = row['id']  # Corrected this to match the column name\n\n        # Check for both .jpg and .png extensions\n        image_path_jpg = os.path.join(self.images_folder, f\"{image_id}.jpg\")\n        image_path_png = os.path.join(self.images_folder, f\"{image_id}.png\")\n        image_path_jpeg = os.path.join(self.images_folder, f\"{image_id}.jpeg\")\n\n        if os.path.exists(image_path_jpg):\n            image_path = image_path_jpg\n        elif os.path.exists(image_path_png):\n            image_path = image_path_png\n        elif os.path.exists(image_path_jpeg):\n            image_path = image_path_jpeg\n        else:\n            # List the directory contents for further debugging\n            print(f\"Directory contents: {os.listdir(self.images_folder)}\")\n            raise FileNotFoundError(f\"Image {image_id} not found with .jpg or .png or .jpeg extension\")\n\n        image = Image.open(image_path).convert('RGB')\n        image = self.image_transforms(image)\n\n        text_inputs = self.tokenizer(text, return_tensors='pt', padding='max_length', truncation=True, max_length=128)\n\n        return {\n            'input_ids': text_inputs['input_ids'].squeeze(),\n            'attention_mask': text_inputs['attention_mask'].squeeze(),\n            'image': image,\n            'label': torch.tensor(label, dtype=torch.long)\n        }\n\n# Create datasets\nimages_folder = '/kaggle/input/multimodal-disaster-dataset-bangla/Multimodal Disaster Bangla Dataset/Photos_Final'\ntrain_dataset = MultimodalDataset(train_data, images_folder, tokenizer, image_transforms)\nvalid_dataset = MultimodalDataset(valid_data, images_folder, tokenizer, image_transforms)\ntest_dataset = MultimodalDataset(test_data, images_folder, tokenizer, image_transforms)\n\n# Create DataLoaders\nbatch_size = 32\ntrain_loader = DataLoader(train_dataset, batch_size=batch_size, shuffle=True)\nvalid_loader = DataLoader(valid_dataset, batch_size=batch_size, shuffle=False)\ntest_loader = DataLoader(test_dataset, batch_size=batch_size, shuffle=False)\n","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-03-23T15:53:15.633586Z","iopub.execute_input":"2025-03-23T15:53:15.633782Z","iopub.status.idle":"2025-03-23T15:53:15.648145Z","shell.execute_reply.started":"2025-03-23T15:53:15.633764Z","shell.execute_reply":"2025-03-23T15:53:15.647184Z"}},"outputs":[],"execution_count":36},{"cell_type":"code","source":"import os\nfrom PIL import Image\n\nimage_id = 1311\nimages_folder = '/kaggle/input/multimodal-disaster-dataset-bangla/Multimodal Disaster Bangla Dataset/Photos_Final' # Update this with your actual image folder path\n\n# Try different image extensions\nimage_path_jpg = os.path.join(images_folder, f\"{image_id}.jpg\")\nimage_path_png = os.path.join(images_folder, f\"{image_id}.png\")\nimage_path_jpeg = os.path.join(images_folder, f\"{image_id}.jpeg\")\n\nif os.path.exists(image_path_jpg):\n    image_path = image_path_jpg\nelif os.path.exists(image_path_png):\n    image_path = image_path_png\nelif os.path.exists(image_path_jpeg):\n    image_path = image_path_jpeg\nelse:\n    print(f\"Image {image_id} not found with any of the expected extensions.\")\n    raise FileNotFoundError(f\"Image {image_id} not found with .jpg or .png or .jpeg extension\")\n\n# Load the image using PIL\nimage = Image.open(image_path)\nimage.show()  # This will open the image in your default image viewer\n","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-03-23T15:53:15.649315Z","iopub.execute_input":"2025-03-23T15:53:15.649632Z","iopub.status.idle":"2025-03-23T15:53:15.938391Z","shell.execute_reply.started":"2025-03-23T15:53:15.649599Z","shell.execute_reply":"2025-03-23T15:53:15.937331Z"}},"outputs":[],"execution_count":37},{"cell_type":"code","source":"\nprint(len(train_dataset))\nprint(len(valid_dataset))\nprint(len(test_dataset))","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-03-23T15:53:15.939368Z","iopub.execute_input":"2025-03-23T15:53:15.939677Z","iopub.status.idle":"2025-03-23T15:53:15.946260Z","shell.execute_reply.started":"2025-03-23T15:53:15.939641Z","shell.execute_reply":"2025-03-23T15:53:15.945207Z"}},"outputs":[{"name":"stdout","text":"1651\n551\n551\n","output_type":"stream"}],"execution_count":38},{"cell_type":"code","source":"import torch.nn as nn\nfrom transformers import BertModel\nimport torchvision.models as models\n\nclass MultimodalModel(nn.Module):\n    def __init__(self, text_model_name='csebuetnlp/banglabert', num_labels=2):\n        super(MultimodalModel, self).__init__()\n        self.text_model = BertModel.from_pretrained(text_model_name)\n        self.image_model = models.resnet50(pretrained=True)\n        self.image_model.fc = nn.Linear(self.image_model.fc.in_features, 768)  # Adjust to match BERT output size\n\n        self.classifier = nn.Linear(768 * 2, num_labels)\n\n    def forward(self, input_ids, attention_mask, image):\n        text_outputs = self.text_model(input_ids=input_ids, attention_mask=attention_mask)\n        text_embeds = text_outputs.last_hidden_state[:, 0, :]  # Use [CLS] token embedding\n\n        image_embeds = self.image_model(image)\n\n        combined_embeds = torch.cat((text_embeds, image_embeds), dim=1)\n        logits = self.classifier(combined_embeds)\n\n        return logits\n\nmodel = MultimodalModel(num_labels=len(df['level'].unique()))","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-03-23T15:53:15.947145Z","iopub.execute_input":"2025-03-23T15:53:15.947452Z","iopub.status.idle":"2025-03-23T15:53:17.779418Z","shell.execute_reply.started":"2025-03-23T15:53:15.947421Z","shell.execute_reply":"2025-03-23T15:53:17.778305Z"}},"outputs":[{"name":"stderr","text":"You are using a model of type electra to instantiate a model of type bert. This is not supported for all configurations of models and can yield errors.\nSome weights of BertModel were not initialized from the model checkpoint at csebuetnlp/banglabert and are newly initialized: ['embeddings.LayerNorm.bias', 'embeddings.LayerNorm.weight', 'embeddings.position_embeddings.weight', 'embeddings.token_type_embeddings.weight', 'embeddings.word_embeddings.weight', 'encoder.layer.0.attention.output.LayerNorm.bias', 'encoder.layer.0.attention.output.LayerNorm.weight', 'encoder.layer.0.attention.output.dense.bias', 'encoder.layer.0.attention.output.dense.weight', 'encoder.layer.0.attention.self.key.bias', 'encoder.layer.0.attention.self.key.weight', 'encoder.layer.0.attention.self.query.bias', 'encoder.layer.0.attention.self.query.weight', 'encoder.layer.0.attention.self.value.bias', 'encoder.layer.0.attention.self.value.weight', 'encoder.layer.0.intermediate.dense.bias', 'encoder.layer.0.intermediate.dense.weight', 'encoder.layer.0.output.LayerNorm.bias', 'encoder.layer.0.output.LayerNorm.weight', 'encoder.layer.0.output.dense.bias', 'encoder.layer.0.output.dense.weight', 'encoder.layer.1.attention.output.LayerNorm.bias', 'encoder.layer.1.attention.output.LayerNorm.weight', 'encoder.layer.1.attention.output.dense.bias', 'encoder.layer.1.attention.output.dense.weight', 'encoder.layer.1.attention.self.key.bias', 'encoder.layer.1.attention.self.key.weight', 'encoder.layer.1.attention.self.query.bias', 'encoder.layer.1.attention.self.query.weight', 'encoder.layer.1.attention.self.value.bias', 'encoder.layer.1.attention.self.value.weight', 'encoder.layer.1.intermediate.dense.bias', 'encoder.layer.1.intermediate.dense.weight', 'encoder.layer.1.output.LayerNorm.bias', 'encoder.layer.1.output.LayerNorm.weight', 'encoder.layer.1.output.dense.bias', 'encoder.layer.1.output.dense.weight', 'encoder.layer.10.attention.output.LayerNorm.bias', 'encoder.layer.10.attention.output.LayerNorm.weight', 'encoder.layer.10.attention.output.dense.bias', 'encoder.layer.10.attention.output.dense.weight', 'encoder.layer.10.attention.self.key.bias', 'encoder.layer.10.attention.self.key.weight', 'encoder.layer.10.attention.self.query.bias', 'encoder.layer.10.attention.self.query.weight', 'encoder.layer.10.attention.self.value.bias', 'encoder.layer.10.attention.self.value.weight', 'encoder.layer.10.intermediate.dense.bias', 'encoder.layer.10.intermediate.dense.weight', 'encoder.layer.10.output.LayerNorm.bias', 'encoder.layer.10.output.LayerNorm.weight', 'encoder.layer.10.output.dense.bias', 'encoder.layer.10.output.dense.weight', 'encoder.layer.11.attention.output.LayerNorm.bias', 'encoder.layer.11.attention.output.LayerNorm.weight', 'encoder.layer.11.attention.output.dense.bias', 'encoder.layer.11.attention.output.dense.weight', 'encoder.layer.11.attention.self.key.bias', 'encoder.layer.11.attention.self.key.weight', 'encoder.layer.11.attention.self.query.bias', 'encoder.layer.11.attention.self.query.weight', 'encoder.layer.11.attention.self.value.bias', 'encoder.layer.11.attention.self.value.weight', 'encoder.layer.11.intermediate.dense.bias', 'encoder.layer.11.intermediate.dense.weight', 'encoder.layer.11.output.LayerNorm.bias', 'encoder.layer.11.output.LayerNorm.weight', 'encoder.layer.11.output.dense.bias', 'encoder.layer.11.output.dense.weight', 'encoder.layer.2.attention.output.LayerNorm.bias', 'encoder.layer.2.attention.output.LayerNorm.weight', 'encoder.layer.2.attention.output.dense.bias', 'encoder.layer.2.attention.output.dense.weight', 'encoder.layer.2.attention.self.key.bias', 'encoder.layer.2.attention.self.key.weight', 'encoder.layer.2.attention.self.query.bias', 'encoder.layer.2.attention.self.query.weight', 'encoder.layer.2.attention.self.value.bias', 'encoder.layer.2.attention.self.value.weight', 'encoder.layer.2.intermediate.dense.bias', 'encoder.layer.2.intermediate.dense.weight', 'encoder.layer.2.output.LayerNorm.bias', 'encoder.layer.2.output.LayerNorm.weight', 'encoder.layer.2.output.dense.bias', 'encoder.layer.2.output.dense.weight', 'encoder.layer.3.attention.output.LayerNorm.bias', 'encoder.layer.3.attention.output.LayerNorm.weight', 'encoder.layer.3.attention.output.dense.bias', 'encoder.layer.3.attention.output.dense.weight', 'encoder.layer.3.attention.self.key.bias', 'encoder.layer.3.attention.self.key.weight', 'encoder.layer.3.attention.self.query.bias', 'encoder.layer.3.attention.self.query.weight', 'encoder.layer.3.attention.self.value.bias', 'encoder.layer.3.attention.self.value.weight', 'encoder.layer.3.intermediate.dense.bias', 'encoder.layer.3.intermediate.dense.weight', 'encoder.layer.3.output.LayerNorm.bias', 'encoder.layer.3.output.LayerNorm.weight', 'encoder.layer.3.output.dense.bias', 'encoder.layer.3.output.dense.weight', 'encoder.layer.4.attention.output.LayerNorm.bias', 'encoder.layer.4.attention.output.LayerNorm.weight', 'encoder.layer.4.attention.output.dense.bias', 'encoder.layer.4.attention.output.dense.weight', 'encoder.layer.4.attention.self.key.bias', 'encoder.layer.4.attention.self.key.weight', 'encoder.layer.4.attention.self.query.bias', 'encoder.layer.4.attention.self.query.weight', 'encoder.layer.4.attention.self.value.bias', 'encoder.layer.4.attention.self.value.weight', 'encoder.layer.4.intermediate.dense.bias', 'encoder.layer.4.intermediate.dense.weight', 'encoder.layer.4.output.LayerNorm.bias', 'encoder.layer.4.output.LayerNorm.weight', 'encoder.layer.4.output.dense.bias', 'encoder.layer.4.output.dense.weight', 'encoder.layer.5.attention.output.LayerNorm.bias', 'encoder.layer.5.attention.output.LayerNorm.weight', 'encoder.layer.5.attention.output.dense.bias', 'encoder.layer.5.attention.output.dense.weight', 'encoder.layer.5.attention.self.key.bias', 'encoder.layer.5.attention.self.key.weight', 'encoder.layer.5.attention.self.query.bias', 'encoder.layer.5.attention.self.query.weight', 'encoder.layer.5.attention.self.value.bias', 'encoder.layer.5.attention.self.value.weight', 'encoder.layer.5.intermediate.dense.bias', 'encoder.layer.5.intermediate.dense.weight', 'encoder.layer.5.output.LayerNorm.bias', 'encoder.layer.5.output.LayerNorm.weight', 'encoder.layer.5.output.dense.bias', 'encoder.layer.5.output.dense.weight', 'encoder.layer.6.attention.output.LayerNorm.bias', 'encoder.layer.6.attention.output.LayerNorm.weight', 'encoder.layer.6.attention.output.dense.bias', 'encoder.layer.6.attention.output.dense.weight', 'encoder.layer.6.attention.self.key.bias', 'encoder.layer.6.attention.self.key.weight', 'encoder.layer.6.attention.self.query.bias', 'encoder.layer.6.attention.self.query.weight', 'encoder.layer.6.attention.self.value.bias', 'encoder.layer.6.attention.self.value.weight', 'encoder.layer.6.intermediate.dense.bias', 'encoder.layer.6.intermediate.dense.weight', 'encoder.layer.6.output.LayerNorm.bias', 'encoder.layer.6.output.LayerNorm.weight', 'encoder.layer.6.output.dense.bias', 'encoder.layer.6.output.dense.weight', 'encoder.layer.7.attention.output.LayerNorm.bias', 'encoder.layer.7.attention.output.LayerNorm.weight', 'encoder.layer.7.attention.output.dense.bias', 'encoder.layer.7.attention.output.dense.weight', 'encoder.layer.7.attention.self.key.bias', 'encoder.layer.7.attention.self.key.weight', 'encoder.layer.7.attention.self.query.bias', 'encoder.layer.7.attention.self.query.weight', 'encoder.layer.7.attention.self.value.bias', 'encoder.layer.7.attention.self.value.weight', 'encoder.layer.7.intermediate.dense.bias', 'encoder.layer.7.intermediate.dense.weight', 'encoder.layer.7.output.LayerNorm.bias', 'encoder.layer.7.output.LayerNorm.weight', 'encoder.layer.7.output.dense.bias', 'encoder.layer.7.output.dense.weight', 'encoder.layer.8.attention.output.LayerNorm.bias', 'encoder.layer.8.attention.output.LayerNorm.weight', 'encoder.layer.8.attention.output.dense.bias', 'encoder.layer.8.attention.output.dense.weight', 'encoder.layer.8.attention.self.key.bias', 'encoder.layer.8.attention.self.key.weight', 'encoder.layer.8.attention.self.query.bias', 'encoder.layer.8.attention.self.query.weight', 'encoder.layer.8.attention.self.value.bias', 'encoder.layer.8.attention.self.value.weight', 'encoder.layer.8.intermediate.dense.bias', 'encoder.layer.8.intermediate.dense.weight', 'encoder.layer.8.output.LayerNorm.bias', 'encoder.layer.8.output.LayerNorm.weight', 'encoder.layer.8.output.dense.bias', 'encoder.layer.8.output.dense.weight', 'encoder.layer.9.attention.output.LayerNorm.bias', 'encoder.layer.9.attention.output.LayerNorm.weight', 'encoder.layer.9.attention.output.dense.bias', 'encoder.layer.9.attention.output.dense.weight', 'encoder.layer.9.attention.self.key.bias', 'encoder.layer.9.attention.self.key.weight', 'encoder.layer.9.attention.self.query.bias', 'encoder.layer.9.attention.self.query.weight', 'encoder.layer.9.attention.self.value.bias', 'encoder.layer.9.attention.self.value.weight', 'encoder.layer.9.intermediate.dense.bias', 'encoder.layer.9.intermediate.dense.weight', 'encoder.layer.9.output.LayerNorm.bias', 'encoder.layer.9.output.LayerNorm.weight', 'encoder.layer.9.output.dense.bias', 'encoder.layer.9.output.dense.weight', 'pooler.dense.bias', 'pooler.dense.weight']\nYou should probably TRAIN this model on a down-stream task to be able to use it for predictions and inference.\n/usr/local/lib/python3.10/dist-packages/torchvision/models/_utils.py:208: UserWarning: The parameter 'pretrained' is deprecated since 0.13 and may be removed in the future, please use 'weights' instead.\n  warnings.warn(\n/usr/local/lib/python3.10/dist-packages/torchvision/models/_utils.py:223: UserWarning: Arguments other than a weight enum or `None` for 'weights' are deprecated since 0.13 and may be removed in the future. The current behavior is equivalent to passing `weights=ResNet50_Weights.IMAGENET1K_V1`. You can also use `weights=ResNet50_Weights.DEFAULT` to get the most up-to-date weights.\n  warnings.warn(msg)\n","output_type":"stream"}],"execution_count":39},{"cell_type":"code","source":"import torch.optim as optim\nfrom torch.nn import CrossEntropyLoss\nfrom tqdm import tqdm\n\ndevice = torch.device(\"cuda\" if torch.cuda.is_available() else \"cpu\")\nmodel.to(device)\n\noptimizer = optim.AdamW(model.parameters(), lr=1e-5)\ncriterion = CrossEntropyLoss()\n\ndef train_model(model, train_loader, valid_loader, epochs=5):\n    for epoch in range(epochs):\n        model.train()\n        total_loss = 0\n        for batch in tqdm(train_loader):\n            input_ids = batch['input_ids'].to(device)\n            attention_mask = batch['attention_mask'].to(device)\n            images = batch['image'].to(device)\n            labels = batch['label'].to(device)\n\n            optimizer.zero_grad()\n            outputs = model(input_ids, attention_mask, images)\n\n            # Debugging: Print output shapes\n            print(f\"Output shape: {outputs.shape}\")\n            print(f\"Labels shape: {labels.shape}\")\n\n            loss = criterion(outputs, labels)\n            loss.backward()\n            optimizer.step()\n\n            total_loss += loss.item()\n\n        avg_train_loss = total_loss / len(train_loader)\n        print(f\"Epoch {epoch + 1}, Train Loss: {avg_train_loss}\")\n\n        model.eval()\n        total_val_loss = 0\n        with torch.no_grad():\n            for batch in valid_loader:\n                input_ids = batch['input_ids'].to(device)\n                attention_mask = batch['attention_mask'].to(device)\n                images = batch['image'].to(device)\n                labels = batch['label'].to(device)\n\n                outputs = model(input_ids, attention_mask, images)\n\n                # Debugging: Print output shapes\n                print(f\"Validation Output shape: {outputs.shape}\")\n                print(f\"Validation Labels shape: {labels.shape}\")\n\n                loss = criterion(outputs, labels)\n                total_val_loss += loss.item()\n\n        avg_val_loss = total_val_loss / len(valid_loader)\n        print(f\"Epoch {epoch + 1}, Validation Loss: {avg_val_loss}\")\n\ntrain_model(model, train_loader, valid_loader, epochs=5)\n\n        ","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-03-23T15:53:17.780728Z","iopub.execute_input":"2025-03-23T15:53:17.781036Z","iopub.status.idle":"2025-03-23T16:00:21.613146Z","shell.execute_reply.started":"2025-03-23T15:53:17.780996Z","shell.execute_reply":"2025-03-23T16:00:21.612407Z"}},"outputs":[{"name":"stderr","text":"  0%|          | 0/52 [00:00<?, ?it/s]","output_type":"stream"},{"name":"stdout","text":"Output shape: torch.Size([32, 3])\nLabels shape: torch.Size([32])\n","output_type":"stream"},{"name":"stderr","text":"  2%|▏         | 1/52 [00:01<01:13,  1.43s/it]","output_type":"stream"},{"name":"stdout","text":"Output shape: torch.Size([32, 3])\nLabels shape: torch.Size([32])\n","output_type":"stream"},{"name":"stderr","text":"  4%|▍         | 2/52 [00:02<01:10,  1.41s/it]","output_type":"stream"},{"name":"stdout","text":"Output shape: torch.Size([32, 3])\nLabels shape: torch.Size([32])\n","output_type":"stream"},{"name":"stderr","text":"  6%|▌         | 3/52 [00:04<01:08,  1.40s/it]","output_type":"stream"},{"name":"stdout","text":"Output shape: torch.Size([32, 3])\nLabels shape: torch.Size([32])\n","output_type":"stream"},{"name":"stderr","text":"  8%|▊         | 4/52 [00:05<01:05,  1.36s/it]","output_type":"stream"},{"name":"stdout","text":"Output shape: torch.Size([32, 3])\nLabels shape: torch.Size([32])\n","output_type":"stream"},{"name":"stderr","text":" 10%|▉         | 5/52 [00:06<01:02,  1.32s/it]","output_type":"stream"},{"name":"stdout","text":"Output shape: torch.Size([32, 3])\nLabels shape: torch.Size([32])\n","output_type":"stream"},{"name":"stderr","text":" 12%|█▏        | 6/52 [00:08<01:03,  1.39s/it]","output_type":"stream"},{"name":"stdout","text":"Output shape: torch.Size([32, 3])\nLabels shape: torch.Size([32])\n","output_type":"stream"},{"name":"stderr","text":" 13%|█▎        | 7/52 [00:09<01:05,  1.45s/it]","output_type":"stream"},{"name":"stdout","text":"Output shape: torch.Size([32, 3])\nLabels shape: torch.Size([32])\n","output_type":"stream"},{"name":"stderr","text":" 15%|█▌        | 8/52 [00:11<01:02,  1.42s/it]","output_type":"stream"},{"name":"stdout","text":"Output shape: torch.Size([32, 3])\nLabels shape: torch.Size([32])\n","output_type":"stream"},{"name":"stderr","text":" 17%|█▋        | 9/52 [00:12<01:00,  1.40s/it]","output_type":"stream"},{"name":"stdout","text":"Output shape: torch.Size([32, 3])\nLabels shape: torch.Size([32])\n","output_type":"stream"},{"name":"stderr","text":" 19%|█▉        | 10/52 [00:13<00:58,  1.39s/it]","output_type":"stream"},{"name":"stdout","text":"Output shape: torch.Size([32, 3])\nLabels shape: torch.Size([32])\n","output_type":"stream"},{"name":"stderr","text":" 21%|██        | 11/52 [00:15<00:56,  1.38s/it]","output_type":"stream"},{"name":"stdout","text":"Output shape: torch.Size([32, 3])\nLabels shape: torch.Size([32])\n","output_type":"stream"},{"name":"stderr","text":" 23%|██▎       | 12/52 [00:16<00:55,  1.39s/it]","output_type":"stream"},{"name":"stdout","text":"Output shape: torch.Size([32, 3])\nLabels shape: torch.Size([32])\n","output_type":"stream"},{"name":"stderr","text":" 25%|██▌       | 13/52 [00:18<00:53,  1.38s/it]","output_type":"stream"},{"name":"stdout","text":"Output shape: torch.Size([32, 3])\nLabels shape: torch.Size([32])\n","output_type":"stream"},{"name":"stderr","text":" 27%|██▋       | 14/52 [00:19<00:53,  1.41s/it]","output_type":"stream"},{"name":"stdout","text":"Output shape: torch.Size([32, 3])\nLabels shape: torch.Size([32])\n","output_type":"stream"},{"name":"stderr","text":" 29%|██▉       | 15/52 [00:20<00:52,  1.41s/it]","output_type":"stream"},{"name":"stdout","text":"Output shape: torch.Size([32, 3])\nLabels shape: torch.Size([32])\n","output_type":"stream"},{"name":"stderr","text":" 31%|███       | 16/52 [00:22<00:51,  1.44s/it]","output_type":"stream"},{"name":"stdout","text":"Output shape: torch.Size([32, 3])\nLabels shape: torch.Size([32])\n","output_type":"stream"},{"name":"stderr","text":" 33%|███▎      | 17/52 [00:24<00:52,  1.49s/it]","output_type":"stream"},{"name":"stdout","text":"Output shape: torch.Size([32, 3])\nLabels shape: torch.Size([32])\n","output_type":"stream"},{"name":"stderr","text":" 35%|███▍      | 18/52 [00:25<00:50,  1.49s/it]","output_type":"stream"},{"name":"stdout","text":"Output shape: torch.Size([32, 3])\nLabels shape: torch.Size([32])\n","output_type":"stream"},{"name":"stderr","text":" 37%|███▋      | 19/52 [00:26<00:48,  1.47s/it]","output_type":"stream"},{"name":"stdout","text":"Output shape: torch.Size([32, 3])\nLabels shape: torch.Size([32])\n","output_type":"stream"},{"name":"stderr","text":" 38%|███▊      | 20/52 [00:28<00:47,  1.47s/it]","output_type":"stream"},{"name":"stdout","text":"Output shape: torch.Size([32, 3])\nLabels shape: torch.Size([32])\n","output_type":"stream"},{"name":"stderr","text":" 40%|████      | 21/52 [00:29<00:44,  1.45s/it]","output_type":"stream"},{"name":"stdout","text":"Output shape: torch.Size([32, 3])\nLabels shape: torch.Size([32])\n","output_type":"stream"},{"name":"stderr","text":" 42%|████▏     | 22/52 [00:31<00:42,  1.43s/it]","output_type":"stream"},{"name":"stdout","text":"Output shape: torch.Size([32, 3])\nLabels shape: torch.Size([32])\n","output_type":"stream"},{"name":"stderr","text":" 44%|████▍     | 23/52 [00:32<00:40,  1.41s/it]","output_type":"stream"},{"name":"stdout","text":"Output shape: torch.Size([32, 3])\nLabels shape: torch.Size([32])\n","output_type":"stream"},{"name":"stderr","text":" 46%|████▌     | 24/52 [00:34<00:39,  1.43s/it]","output_type":"stream"},{"name":"stdout","text":"Output shape: torch.Size([32, 3])\nLabels shape: torch.Size([32])\n","output_type":"stream"},{"name":"stderr","text":" 48%|████▊     | 25/52 [00:35<00:38,  1.44s/it]","output_type":"stream"},{"name":"stdout","text":"Output shape: torch.Size([32, 3])\nLabels shape: torch.Size([32])\n","output_type":"stream"},{"name":"stderr","text":" 50%|█████     | 26/52 [00:36<00:36,  1.41s/it]","output_type":"stream"},{"name":"stdout","text":"Output shape: torch.Size([32, 3])\nLabels shape: torch.Size([32])\n","output_type":"stream"},{"name":"stderr","text":" 52%|█████▏    | 27/52 [00:38<00:34,  1.40s/it]","output_type":"stream"},{"name":"stdout","text":"Output shape: torch.Size([32, 3])\nLabels shape: torch.Size([32])\n","output_type":"stream"},{"name":"stderr","text":" 54%|█████▍    | 28/52 [00:39<00:33,  1.39s/it]","output_type":"stream"},{"name":"stdout","text":"Output shape: torch.Size([32, 3])\nLabels shape: torch.Size([32])\n","output_type":"stream"},{"name":"stderr","text":" 56%|█████▌    | 29/52 [00:41<00:32,  1.40s/it]","output_type":"stream"},{"name":"stdout","text":"Output shape: torch.Size([32, 3])\nLabels shape: torch.Size([32])\n","output_type":"stream"},{"name":"stderr","text":" 58%|█████▊    | 30/52 [00:42<00:30,  1.39s/it]","output_type":"stream"},{"name":"stdout","text":"Output shape: torch.Size([32, 3])\nLabels shape: torch.Size([32])\n","output_type":"stream"},{"name":"stderr","text":" 60%|█████▉    | 31/52 [00:43<00:29,  1.39s/it]","output_type":"stream"},{"name":"stdout","text":"Output shape: torch.Size([32, 3])\nLabels shape: torch.Size([32])\n","output_type":"stream"},{"name":"stderr","text":" 62%|██████▏   | 32/52 [00:45<00:27,  1.38s/it]","output_type":"stream"},{"name":"stdout","text":"Output shape: torch.Size([32, 3])\nLabels shape: torch.Size([32])\n","output_type":"stream"},{"name":"stderr","text":" 63%|██████▎   | 33/52 [00:46<00:26,  1.37s/it]","output_type":"stream"},{"name":"stdout","text":"Output shape: torch.Size([32, 3])\nLabels shape: torch.Size([32])\n","output_type":"stream"},{"name":"stderr","text":" 65%|██████▌   | 34/52 [00:47<00:24,  1.35s/it]","output_type":"stream"},{"name":"stdout","text":"Output shape: torch.Size([32, 3])\nLabels shape: torch.Size([32])\n","output_type":"stream"},{"name":"stderr","text":" 67%|██████▋   | 35/52 [00:49<00:23,  1.37s/it]","output_type":"stream"},{"name":"stdout","text":"Output shape: torch.Size([32, 3])\nLabels shape: torch.Size([32])\n","output_type":"stream"},{"name":"stderr","text":" 69%|██████▉   | 36/52 [00:50<00:22,  1.38s/it]","output_type":"stream"},{"name":"stdout","text":"Output shape: torch.Size([32, 3])\nLabels shape: torch.Size([32])\n","output_type":"stream"},{"name":"stderr","text":" 71%|███████   | 37/52 [00:52<00:20,  1.38s/it]","output_type":"stream"},{"name":"stdout","text":"Output shape: torch.Size([32, 3])\nLabels shape: torch.Size([32])\n","output_type":"stream"},{"name":"stderr","text":" 73%|███████▎  | 38/52 [00:53<00:19,  1.37s/it]","output_type":"stream"},{"name":"stdout","text":"Output shape: torch.Size([32, 3])\nLabels shape: torch.Size([32])\n","output_type":"stream"},{"name":"stderr","text":" 75%|███████▌  | 39/52 [00:54<00:17,  1.35s/it]","output_type":"stream"},{"name":"stdout","text":"Output shape: torch.Size([32, 3])\nLabels shape: torch.Size([32])\n","output_type":"stream"},{"name":"stderr","text":" 77%|███████▋  | 40/52 [00:56<00:16,  1.36s/it]","output_type":"stream"},{"name":"stdout","text":"Output shape: torch.Size([32, 3])\nLabels shape: torch.Size([32])\n","output_type":"stream"},{"name":"stderr","text":" 79%|███████▉  | 41/52 [00:57<00:15,  1.39s/it]","output_type":"stream"},{"name":"stdout","text":"Output shape: torch.Size([32, 3])\nLabels shape: torch.Size([32])\n","output_type":"stream"},{"name":"stderr","text":" 81%|████████  | 42/52 [00:58<00:14,  1.41s/it]","output_type":"stream"},{"name":"stdout","text":"Output shape: torch.Size([32, 3])\nLabels shape: torch.Size([32])\n","output_type":"stream"},{"name":"stderr","text":" 83%|████████▎ | 43/52 [01:00<00:12,  1.43s/it]","output_type":"stream"},{"name":"stdout","text":"Output shape: torch.Size([32, 3])\nLabels shape: torch.Size([32])\n","output_type":"stream"},{"name":"stderr","text":" 85%|████████▍ | 44/52 [01:01<00:11,  1.42s/it]","output_type":"stream"},{"name":"stdout","text":"Output shape: torch.Size([32, 3])\nLabels shape: torch.Size([32])\n","output_type":"stream"},{"name":"stderr","text":" 87%|████████▋ | 45/52 [01:03<00:09,  1.38s/it]","output_type":"stream"},{"name":"stdout","text":"Output shape: torch.Size([32, 3])\nLabels shape: torch.Size([32])\n","output_type":"stream"},{"name":"stderr","text":" 88%|████████▊ | 46/52 [01:04<00:08,  1.39s/it]","output_type":"stream"},{"name":"stdout","text":"Output shape: torch.Size([32, 3])\nLabels shape: torch.Size([32])\n","output_type":"stream"},{"name":"stderr","text":" 90%|█████████ | 47/52 [01:05<00:06,  1.36s/it]","output_type":"stream"},{"name":"stdout","text":"Output shape: torch.Size([32, 3])\nLabels shape: torch.Size([32])\n","output_type":"stream"},{"name":"stderr","text":" 92%|█████████▏| 48/52 [01:07<00:05,  1.36s/it]","output_type":"stream"},{"name":"stdout","text":"Output shape: torch.Size([32, 3])\nLabels shape: torch.Size([32])\n","output_type":"stream"},{"name":"stderr","text":" 94%|█████████▍| 49/52 [01:08<00:04,  1.38s/it]","output_type":"stream"},{"name":"stdout","text":"Output shape: torch.Size([32, 3])\nLabels shape: torch.Size([32])\n","output_type":"stream"},{"name":"stderr","text":" 96%|█████████▌| 50/52 [01:09<00:02,  1.36s/it]","output_type":"stream"},{"name":"stdout","text":"Output shape: torch.Size([32, 3])\nLabels shape: torch.Size([32])\n","output_type":"stream"},{"name":"stderr","text":" 98%|█████████▊| 51/52 [01:11<00:01,  1.35s/it]","output_type":"stream"},{"name":"stdout","text":"Output shape: torch.Size([19, 3])\nLabels shape: torch.Size([19])\n","output_type":"stream"},{"name":"stderr","text":"100%|██████████| 52/52 [01:12<00:00,  1.39s/it]\n","output_type":"stream"},{"name":"stdout","text":"Epoch 1, Train Loss: 0.4358830749988556\nValidation Output shape: torch.Size([32, 3])\nValidation Labels shape: torch.Size([32])\nValidation Output shape: torch.Size([32, 3])\nValidation Labels shape: torch.Size([32])\nValidation Output shape: torch.Size([32, 3])\nValidation Labels shape: torch.Size([32])\nValidation Output shape: torch.Size([32, 3])\nValidation Labels shape: torch.Size([32])\nValidation Output shape: torch.Size([32, 3])\nValidation Labels shape: torch.Size([32])\nValidation Output shape: torch.Size([32, 3])\nValidation Labels shape: torch.Size([32])\nValidation Output shape: torch.Size([32, 3])\nValidation Labels shape: torch.Size([32])\nValidation Output shape: torch.Size([32, 3])\nValidation Labels shape: torch.Size([32])\nValidation Output shape: torch.Size([32, 3])\nValidation Labels shape: torch.Size([32])\nValidation Output shape: torch.Size([32, 3])\nValidation Labels shape: torch.Size([32])\nValidation Output shape: torch.Size([32, 3])\nValidation Labels shape: torch.Size([32])\nValidation Output shape: torch.Size([32, 3])\nValidation Labels shape: torch.Size([32])\nValidation Output shape: torch.Size([32, 3])\nValidation Labels shape: torch.Size([32])\nValidation Output shape: torch.Size([32, 3])\nValidation Labels shape: torch.Size([32])\nValidation Output shape: torch.Size([32, 3])\nValidation Labels shape: torch.Size([32])\nValidation Output shape: torch.Size([32, 3])\nValidation Labels shape: torch.Size([32])\nValidation Output shape: torch.Size([32, 3])\nValidation Labels shape: torch.Size([32])\nValidation Output shape: torch.Size([7, 3])\nValidation Labels shape: torch.Size([7])\nEpoch 1, Validation Loss: 0.21892204052872127\n","output_type":"stream"},{"name":"stderr","text":"  0%|          | 0/52 [00:00<?, ?it/s]","output_type":"stream"},{"name":"stdout","text":"Output shape: torch.Size([32, 3])\nLabels shape: torch.Size([32])\n","output_type":"stream"},{"name":"stderr","text":"  2%|▏         | 1/52 [00:01<01:04,  1.26s/it]","output_type":"stream"},{"name":"stdout","text":"Output shape: torch.Size([32, 3])\nLabels shape: torch.Size([32])\n","output_type":"stream"},{"name":"stderr","text":"  4%|▍         | 2/52 [00:02<01:07,  1.35s/it]","output_type":"stream"},{"name":"stdout","text":"Output shape: torch.Size([32, 3])\nLabels shape: torch.Size([32])\n","output_type":"stream"},{"name":"stderr","text":"  6%|▌         | 3/52 [00:04<01:07,  1.37s/it]","output_type":"stream"},{"name":"stdout","text":"Output shape: torch.Size([32, 3])\nLabels shape: torch.Size([32])\n","output_type":"stream"},{"name":"stderr","text":"  8%|▊         | 4/52 [00:05<01:08,  1.43s/it]","output_type":"stream"},{"name":"stdout","text":"Output shape: torch.Size([32, 3])\nLabels shape: torch.Size([32])\n","output_type":"stream"},{"name":"stderr","text":" 10%|▉         | 5/52 [00:07<01:07,  1.43s/it]","output_type":"stream"},{"name":"stdout","text":"Output shape: torch.Size([32, 3])\nLabels shape: torch.Size([32])\n","output_type":"stream"},{"name":"stderr","text":" 12%|█▏        | 6/52 [00:08<01:04,  1.39s/it]","output_type":"stream"},{"name":"stdout","text":"Output shape: torch.Size([32, 3])\nLabels shape: torch.Size([32])\n","output_type":"stream"},{"name":"stderr","text":" 13%|█▎        | 7/52 [00:09<01:02,  1.39s/it]","output_type":"stream"},{"name":"stdout","text":"Output shape: torch.Size([32, 3])\nLabels shape: torch.Size([32])\n","output_type":"stream"},{"name":"stderr","text":" 15%|█▌        | 8/52 [00:11<01:00,  1.37s/it]","output_type":"stream"},{"name":"stdout","text":"Output shape: torch.Size([32, 3])\nLabels shape: torch.Size([32])\n","output_type":"stream"},{"name":"stderr","text":" 17%|█▋        | 9/52 [00:12<00:58,  1.37s/it]","output_type":"stream"},{"name":"stdout","text":"Output shape: torch.Size([32, 3])\nLabels shape: torch.Size([32])\n","output_type":"stream"},{"name":"stderr","text":" 19%|█▉        | 10/52 [00:13<00:58,  1.38s/it]","output_type":"stream"},{"name":"stdout","text":"Output shape: torch.Size([32, 3])\nLabels shape: torch.Size([32])\n","output_type":"stream"},{"name":"stderr","text":" 21%|██        | 11/52 [00:15<00:56,  1.38s/it]","output_type":"stream"},{"name":"stdout","text":"Output shape: torch.Size([32, 3])\nLabels shape: torch.Size([32])\n","output_type":"stream"},{"name":"stderr","text":" 23%|██▎       | 12/52 [00:16<00:55,  1.39s/it]","output_type":"stream"},{"name":"stdout","text":"Output shape: torch.Size([32, 3])\nLabels shape: torch.Size([32])\n","output_type":"stream"},{"name":"stderr","text":" 25%|██▌       | 13/52 [00:18<00:54,  1.41s/it]","output_type":"stream"},{"name":"stdout","text":"Output shape: torch.Size([32, 3])\nLabels shape: torch.Size([32])\n","output_type":"stream"},{"name":"stderr","text":" 27%|██▋       | 14/52 [00:19<00:55,  1.47s/it]","output_type":"stream"},{"name":"stdout","text":"Output shape: torch.Size([32, 3])\nLabels shape: torch.Size([32])\n","output_type":"stream"},{"name":"stderr","text":" 29%|██▉       | 15/52 [00:21<00:53,  1.46s/it]","output_type":"stream"},{"name":"stdout","text":"Output shape: torch.Size([32, 3])\nLabels shape: torch.Size([32])\n","output_type":"stream"},{"name":"stderr","text":" 31%|███       | 16/52 [00:22<00:52,  1.45s/it]","output_type":"stream"},{"name":"stdout","text":"Output shape: torch.Size([32, 3])\nLabels shape: torch.Size([32])\n","output_type":"stream"},{"name":"stderr","text":" 33%|███▎      | 17/52 [00:23<00:50,  1.44s/it]","output_type":"stream"},{"name":"stdout","text":"Output shape: torch.Size([32, 3])\nLabels shape: torch.Size([32])\n","output_type":"stream"},{"name":"stderr","text":" 35%|███▍      | 18/52 [00:25<00:48,  1.42s/it]","output_type":"stream"},{"name":"stdout","text":"Output shape: torch.Size([32, 3])\nLabels shape: torch.Size([32])\n","output_type":"stream"},{"name":"stderr","text":" 37%|███▋      | 19/52 [00:26<00:46,  1.40s/it]","output_type":"stream"},{"name":"stdout","text":"Output shape: torch.Size([32, 3])\nLabels shape: torch.Size([32])\n","output_type":"stream"},{"name":"stderr","text":" 38%|███▊      | 20/52 [00:28<00:44,  1.39s/it]","output_type":"stream"},{"name":"stdout","text":"Output shape: torch.Size([32, 3])\nLabels shape: torch.Size([32])\n","output_type":"stream"},{"name":"stderr","text":" 40%|████      | 21/52 [00:29<00:42,  1.38s/it]","output_type":"stream"},{"name":"stdout","text":"Output shape: torch.Size([32, 3])\nLabels shape: torch.Size([32])\n","output_type":"stream"},{"name":"stderr","text":" 42%|████▏     | 22/52 [00:30<00:41,  1.38s/it]","output_type":"stream"},{"name":"stdout","text":"Output shape: torch.Size([32, 3])\nLabels shape: torch.Size([32])\n","output_type":"stream"},{"name":"stderr","text":" 44%|████▍     | 23/52 [00:32<00:40,  1.39s/it]","output_type":"stream"},{"name":"stdout","text":"Output shape: torch.Size([32, 3])\nLabels shape: torch.Size([32])\n","output_type":"stream"},{"name":"stderr","text":" 46%|████▌     | 24/52 [00:33<00:40,  1.46s/it]","output_type":"stream"},{"name":"stdout","text":"Output shape: torch.Size([32, 3])\nLabels shape: torch.Size([32])\n","output_type":"stream"},{"name":"stderr","text":" 48%|████▊     | 25/52 [00:35<00:39,  1.45s/it]","output_type":"stream"},{"name":"stdout","text":"Output shape: torch.Size([32, 3])\nLabels shape: torch.Size([32])\n","output_type":"stream"},{"name":"stderr","text":" 50%|█████     | 26/52 [00:36<00:36,  1.42s/it]","output_type":"stream"},{"name":"stdout","text":"Output shape: torch.Size([32, 3])\nLabels shape: torch.Size([32])\n","output_type":"stream"},{"name":"stderr","text":" 52%|█████▏    | 27/52 [00:37<00:35,  1.40s/it]","output_type":"stream"},{"name":"stdout","text":"Output shape: torch.Size([32, 3])\nLabels shape: torch.Size([32])\n","output_type":"stream"},{"name":"stderr","text":" 54%|█████▍    | 28/52 [00:39<00:33,  1.39s/it]","output_type":"stream"},{"name":"stdout","text":"Output shape: torch.Size([32, 3])\nLabels shape: torch.Size([32])\n","output_type":"stream"},{"name":"stderr","text":" 56%|█████▌    | 29/52 [00:40<00:31,  1.37s/it]","output_type":"stream"},{"name":"stdout","text":"Output shape: torch.Size([32, 3])\nLabels shape: torch.Size([32])\n","output_type":"stream"},{"name":"stderr","text":" 58%|█████▊    | 30/52 [00:41<00:29,  1.35s/it]","output_type":"stream"},{"name":"stdout","text":"Output shape: torch.Size([32, 3])\nLabels shape: torch.Size([32])\n","output_type":"stream"},{"name":"stderr","text":" 60%|█████▉    | 31/52 [00:43<00:28,  1.35s/it]","output_type":"stream"},{"name":"stdout","text":"Output shape: torch.Size([32, 3])\nLabels shape: torch.Size([32])\n","output_type":"stream"},{"name":"stderr","text":" 62%|██████▏   | 32/52 [00:44<00:27,  1.35s/it]","output_type":"stream"},{"name":"stdout","text":"Output shape: torch.Size([32, 3])\nLabels shape: torch.Size([32])\n","output_type":"stream"},{"name":"stderr","text":" 63%|██████▎   | 33/52 [00:45<00:25,  1.35s/it]","output_type":"stream"},{"name":"stdout","text":"Output shape: torch.Size([32, 3])\nLabels shape: torch.Size([32])\n","output_type":"stream"},{"name":"stderr","text":" 65%|██████▌   | 34/52 [00:47<00:24,  1.38s/it]","output_type":"stream"},{"name":"stdout","text":"Output shape: torch.Size([32, 3])\nLabels shape: torch.Size([32])\n","output_type":"stream"},{"name":"stderr","text":" 67%|██████▋   | 35/52 [00:48<00:23,  1.36s/it]","output_type":"stream"},{"name":"stdout","text":"Output shape: torch.Size([32, 3])\nLabels shape: torch.Size([32])\n","output_type":"stream"},{"name":"stderr","text":" 69%|██████▉   | 36/52 [00:50<00:22,  1.39s/it]","output_type":"stream"},{"name":"stdout","text":"Output shape: torch.Size([32, 3])\nLabels shape: torch.Size([32])\n","output_type":"stream"},{"name":"stderr","text":" 71%|███████   | 37/52 [00:51<00:20,  1.37s/it]","output_type":"stream"},{"name":"stdout","text":"Output shape: torch.Size([32, 3])\nLabels shape: torch.Size([32])\n","output_type":"stream"},{"name":"stderr","text":" 73%|███████▎  | 38/52 [00:52<00:19,  1.36s/it]","output_type":"stream"},{"name":"stdout","text":"Output shape: torch.Size([32, 3])\nLabels shape: torch.Size([32])\n","output_type":"stream"},{"name":"stderr","text":" 75%|███████▌  | 39/52 [00:54<00:17,  1.36s/it]","output_type":"stream"},{"name":"stdout","text":"Output shape: torch.Size([32, 3])\nLabels shape: torch.Size([32])\n","output_type":"stream"},{"name":"stderr","text":" 77%|███████▋  | 40/52 [00:55<00:16,  1.35s/it]","output_type":"stream"},{"name":"stdout","text":"Output shape: torch.Size([32, 3])\nLabels shape: torch.Size([32])\n","output_type":"stream"},{"name":"stderr","text":" 79%|███████▉  | 41/52 [00:56<00:14,  1.34s/it]","output_type":"stream"},{"name":"stdout","text":"Output shape: torch.Size([32, 3])\nLabels shape: torch.Size([32])\n","output_type":"stream"},{"name":"stderr","text":" 81%|████████  | 42/52 [00:58<00:13,  1.35s/it]","output_type":"stream"},{"name":"stdout","text":"Output shape: torch.Size([32, 3])\nLabels shape: torch.Size([32])\n","output_type":"stream"},{"name":"stderr","text":" 83%|████████▎ | 43/52 [00:59<00:12,  1.37s/it]","output_type":"stream"},{"name":"stdout","text":"Output shape: torch.Size([32, 3])\nLabels shape: torch.Size([32])\n","output_type":"stream"},{"name":"stderr","text":" 85%|████████▍ | 44/52 [01:01<00:11,  1.39s/it]","output_type":"stream"},{"name":"stdout","text":"Output shape: torch.Size([32, 3])\nLabels shape: torch.Size([32])\n","output_type":"stream"},{"name":"stderr","text":" 87%|████████▋ | 45/52 [01:02<00:09,  1.37s/it]","output_type":"stream"},{"name":"stdout","text":"Output shape: torch.Size([32, 3])\nLabels shape: torch.Size([32])\n","output_type":"stream"},{"name":"stderr","text":" 88%|████████▊ | 46/52 [01:03<00:08,  1.40s/it]","output_type":"stream"},{"name":"stdout","text":"Output shape: torch.Size([32, 3])\nLabels shape: torch.Size([32])\n","output_type":"stream"},{"name":"stderr","text":" 90%|█████████ | 47/52 [01:05<00:06,  1.39s/it]","output_type":"stream"},{"name":"stdout","text":"Output shape: torch.Size([32, 3])\nLabels shape: torch.Size([32])\n","output_type":"stream"},{"name":"stderr","text":" 92%|█████████▏| 48/52 [01:06<00:05,  1.45s/it]","output_type":"stream"},{"name":"stdout","text":"Output shape: torch.Size([32, 3])\nLabels shape: torch.Size([32])\n","output_type":"stream"},{"name":"stderr","text":" 94%|█████████▍| 49/52 [01:08<00:04,  1.42s/it]","output_type":"stream"},{"name":"stdout","text":"Output shape: torch.Size([32, 3])\nLabels shape: torch.Size([32])\n","output_type":"stream"},{"name":"stderr","text":" 96%|█████████▌| 50/52 [01:09<00:02,  1.40s/it]","output_type":"stream"},{"name":"stdout","text":"Output shape: torch.Size([32, 3])\nLabels shape: torch.Size([32])\n","output_type":"stream"},{"name":"stderr","text":" 98%|█████████▊| 51/52 [01:11<00:01,  1.41s/it]","output_type":"stream"},{"name":"stdout","text":"Output shape: torch.Size([19, 3])\nLabels shape: torch.Size([19])\n","output_type":"stream"},{"name":"stderr","text":"100%|██████████| 52/52 [01:11<00:00,  1.38s/it]\n","output_type":"stream"},{"name":"stdout","text":"Epoch 2, Train Loss: 0.1896201862881963\nValidation Output shape: torch.Size([32, 3])\nValidation Labels shape: torch.Size([32])\nValidation Output shape: torch.Size([32, 3])\nValidation Labels shape: torch.Size([32])\nValidation Output shape: torch.Size([32, 3])\nValidation Labels shape: torch.Size([32])\nValidation Output shape: torch.Size([32, 3])\nValidation Labels shape: torch.Size([32])\nValidation Output shape: torch.Size([32, 3])\nValidation Labels shape: torch.Size([32])\nValidation Output shape: torch.Size([32, 3])\nValidation Labels shape: torch.Size([32])\nValidation Output shape: torch.Size([32, 3])\nValidation Labels shape: torch.Size([32])\nValidation Output shape: torch.Size([32, 3])\nValidation Labels shape: torch.Size([32])\nValidation Output shape: torch.Size([32, 3])\nValidation Labels shape: torch.Size([32])\nValidation Output shape: torch.Size([32, 3])\nValidation Labels shape: torch.Size([32])\nValidation Output shape: torch.Size([32, 3])\nValidation Labels shape: torch.Size([32])\nValidation Output shape: torch.Size([32, 3])\nValidation Labels shape: torch.Size([32])\nValidation Output shape: torch.Size([32, 3])\nValidation Labels shape: torch.Size([32])\nValidation Output shape: torch.Size([32, 3])\nValidation Labels shape: torch.Size([32])\nValidation Output shape: torch.Size([32, 3])\nValidation Labels shape: torch.Size([32])\nValidation Output shape: torch.Size([32, 3])\nValidation Labels shape: torch.Size([32])\nValidation Output shape: torch.Size([32, 3])\nValidation Labels shape: torch.Size([32])\nValidation Output shape: torch.Size([7, 3])\nValidation Labels shape: torch.Size([7])\nEpoch 2, Validation Loss: 0.10795189026329252\n","output_type":"stream"},{"name":"stderr","text":"  0%|          | 0/52 [00:00<?, ?it/s]","output_type":"stream"},{"name":"stdout","text":"Output shape: torch.Size([32, 3])\nLabels shape: torch.Size([32])\n","output_type":"stream"},{"name":"stderr","text":"  2%|▏         | 1/52 [00:01<01:06,  1.30s/it]","output_type":"stream"},{"name":"stdout","text":"Output shape: torch.Size([32, 3])\nLabels shape: torch.Size([32])\n","output_type":"stream"},{"name":"stderr","text":"  4%|▍         | 2/52 [00:02<01:06,  1.34s/it]","output_type":"stream"},{"name":"stdout","text":"Output shape: torch.Size([32, 3])\nLabels shape: torch.Size([32])\n","output_type":"stream"},{"name":"stderr","text":"  6%|▌         | 3/52 [00:04<01:07,  1.37s/it]","output_type":"stream"},{"name":"stdout","text":"Output shape: torch.Size([32, 3])\nLabels shape: torch.Size([32])\n","output_type":"stream"},{"name":"stderr","text":"  8%|▊         | 4/52 [00:05<01:03,  1.33s/it]","output_type":"stream"},{"name":"stdout","text":"Output shape: torch.Size([32, 3])\nLabels shape: torch.Size([32])\n","output_type":"stream"},{"name":"stderr","text":" 10%|▉         | 5/52 [00:06<01:04,  1.37s/it]","output_type":"stream"},{"name":"stdout","text":"Output shape: torch.Size([32, 3])\nLabels shape: torch.Size([32])\n","output_type":"stream"},{"name":"stderr","text":" 12%|█▏        | 6/52 [00:08<01:03,  1.37s/it]","output_type":"stream"},{"name":"stdout","text":"Output shape: torch.Size([32, 3])\nLabels shape: torch.Size([32])\n","output_type":"stream"},{"name":"stderr","text":" 13%|█▎        | 7/52 [00:09<01:00,  1.35s/it]","output_type":"stream"},{"name":"stdout","text":"Output shape: torch.Size([32, 3])\nLabels shape: torch.Size([32])\n","output_type":"stream"},{"name":"stderr","text":" 15%|█▌        | 8/52 [00:10<00:58,  1.34s/it]","output_type":"stream"},{"name":"stdout","text":"Output shape: torch.Size([32, 3])\nLabels shape: torch.Size([32])\n","output_type":"stream"},{"name":"stderr","text":" 17%|█▋        | 9/52 [00:12<00:57,  1.34s/it]","output_type":"stream"},{"name":"stdout","text":"Output shape: torch.Size([32, 3])\nLabels shape: torch.Size([32])\n","output_type":"stream"},{"name":"stderr","text":" 19%|█▉        | 10/52 [00:13<00:57,  1.37s/it]","output_type":"stream"},{"name":"stdout","text":"Output shape: torch.Size([32, 3])\nLabels shape: torch.Size([32])\n","output_type":"stream"},{"name":"stderr","text":" 21%|██        | 11/52 [00:14<00:56,  1.38s/it]","output_type":"stream"},{"name":"stdout","text":"Output shape: torch.Size([32, 3])\nLabels shape: torch.Size([32])\n","output_type":"stream"},{"name":"stderr","text":" 23%|██▎       | 12/52 [00:16<00:55,  1.38s/it]","output_type":"stream"},{"name":"stdout","text":"Output shape: torch.Size([32, 3])\nLabels shape: torch.Size([32])\n","output_type":"stream"},{"name":"stderr","text":" 25%|██▌       | 13/52 [00:17<00:53,  1.36s/it]","output_type":"stream"},{"name":"stdout","text":"Output shape: torch.Size([32, 3])\nLabels shape: torch.Size([32])\n","output_type":"stream"},{"name":"stderr","text":" 27%|██▋       | 14/52 [00:18<00:51,  1.35s/it]","output_type":"stream"},{"name":"stdout","text":"Output shape: torch.Size([32, 3])\nLabels shape: torch.Size([32])\n","output_type":"stream"},{"name":"stderr","text":" 29%|██▉       | 15/52 [00:20<00:51,  1.38s/it]","output_type":"stream"},{"name":"stdout","text":"Output shape: torch.Size([32, 3])\nLabels shape: torch.Size([32])\n","output_type":"stream"},{"name":"stderr","text":" 31%|███       | 16/52 [00:21<00:49,  1.38s/it]","output_type":"stream"},{"name":"stdout","text":"Output shape: torch.Size([32, 3])\nLabels shape: torch.Size([32])\n","output_type":"stream"},{"name":"stderr","text":" 33%|███▎      | 17/52 [00:23<00:48,  1.39s/it]","output_type":"stream"},{"name":"stdout","text":"Output shape: torch.Size([32, 3])\nLabels shape: torch.Size([32])\n","output_type":"stream"},{"name":"stderr","text":" 35%|███▍      | 18/52 [00:24<00:47,  1.39s/it]","output_type":"stream"},{"name":"stdout","text":"Output shape: torch.Size([32, 3])\nLabels shape: torch.Size([32])\n","output_type":"stream"},{"name":"stderr","text":" 37%|███▋      | 19/52 [00:25<00:44,  1.36s/it]","output_type":"stream"},{"name":"stdout","text":"Output shape: torch.Size([32, 3])\nLabels shape: torch.Size([32])\n","output_type":"stream"},{"name":"stderr","text":" 38%|███▊      | 20/52 [00:27<00:43,  1.35s/it]","output_type":"stream"},{"name":"stdout","text":"Output shape: torch.Size([32, 3])\nLabels shape: torch.Size([32])\n","output_type":"stream"},{"name":"stderr","text":" 40%|████      | 21/52 [00:28<00:41,  1.35s/it]","output_type":"stream"},{"name":"stdout","text":"Output shape: torch.Size([32, 3])\nLabels shape: torch.Size([32])\n","output_type":"stream"},{"name":"stderr","text":" 42%|████▏     | 22/52 [00:29<00:40,  1.35s/it]","output_type":"stream"},{"name":"stdout","text":"Output shape: torch.Size([32, 3])\nLabels shape: torch.Size([32])\n","output_type":"stream"},{"name":"stderr","text":" 44%|████▍     | 23/52 [00:31<00:40,  1.39s/it]","output_type":"stream"},{"name":"stdout","text":"Output shape: torch.Size([32, 3])\nLabels shape: torch.Size([32])\n","output_type":"stream"},{"name":"stderr","text":" 46%|████▌     | 24/52 [00:32<00:39,  1.40s/it]","output_type":"stream"},{"name":"stdout","text":"Output shape: torch.Size([32, 3])\nLabels shape: torch.Size([32])\n","output_type":"stream"},{"name":"stderr","text":" 48%|████▊     | 25/52 [00:34<00:37,  1.40s/it]","output_type":"stream"},{"name":"stdout","text":"Output shape: torch.Size([32, 3])\nLabels shape: torch.Size([32])\n","output_type":"stream"},{"name":"stderr","text":" 50%|█████     | 26/52 [00:35<00:36,  1.39s/it]","output_type":"stream"},{"name":"stdout","text":"Output shape: torch.Size([32, 3])\nLabels shape: torch.Size([32])\n","output_type":"stream"},{"name":"stderr","text":" 52%|█████▏    | 27/52 [00:36<00:34,  1.38s/it]","output_type":"stream"},{"name":"stdout","text":"Output shape: torch.Size([32, 3])\nLabels shape: torch.Size([32])\n","output_type":"stream"},{"name":"stderr","text":" 54%|█████▍    | 28/52 [00:38<00:32,  1.37s/it]","output_type":"stream"},{"name":"stdout","text":"Output shape: torch.Size([32, 3])\nLabels shape: torch.Size([32])\n","output_type":"stream"},{"name":"stderr","text":" 56%|█████▌    | 29/52 [00:39<00:31,  1.35s/it]","output_type":"stream"},{"name":"stdout","text":"Output shape: torch.Size([32, 3])\nLabels shape: torch.Size([32])\n","output_type":"stream"},{"name":"stderr","text":" 58%|█████▊    | 30/52 [00:40<00:29,  1.35s/it]","output_type":"stream"},{"name":"stdout","text":"Output shape: torch.Size([32, 3])\nLabels shape: torch.Size([32])\n","output_type":"stream"},{"name":"stderr","text":" 60%|█████▉    | 31/52 [00:42<00:28,  1.36s/it]","output_type":"stream"},{"name":"stdout","text":"Output shape: torch.Size([32, 3])\nLabels shape: torch.Size([32])\n","output_type":"stream"},{"name":"stderr","text":" 62%|██████▏   | 32/52 [00:43<00:27,  1.38s/it]","output_type":"stream"},{"name":"stdout","text":"Output shape: torch.Size([32, 3])\nLabels shape: torch.Size([32])\n","output_type":"stream"},{"name":"stderr","text":" 63%|██████▎   | 33/52 [00:45<00:26,  1.40s/it]","output_type":"stream"},{"name":"stdout","text":"Output shape: torch.Size([32, 3])\nLabels shape: torch.Size([32])\n","output_type":"stream"},{"name":"stderr","text":" 65%|██████▌   | 34/52 [00:46<00:25,  1.43s/it]","output_type":"stream"},{"name":"stdout","text":"Output shape: torch.Size([32, 3])\nLabels shape: torch.Size([32])\n","output_type":"stream"},{"name":"stderr","text":" 67%|██████▋   | 35/52 [00:48<00:24,  1.41s/it]","output_type":"stream"},{"name":"stdout","text":"Output shape: torch.Size([32, 3])\nLabels shape: torch.Size([32])\n","output_type":"stream"},{"name":"stderr","text":" 69%|██████▉   | 36/52 [00:49<00:22,  1.40s/it]","output_type":"stream"},{"name":"stdout","text":"Output shape: torch.Size([32, 3])\nLabels shape: torch.Size([32])\n","output_type":"stream"},{"name":"stderr","text":" 71%|███████   | 37/52 [00:50<00:21,  1.41s/it]","output_type":"stream"},{"name":"stdout","text":"Output shape: torch.Size([32, 3])\nLabels shape: torch.Size([32])\n","output_type":"stream"},{"name":"stderr","text":" 73%|███████▎  | 38/52 [00:52<00:19,  1.41s/it]","output_type":"stream"},{"name":"stdout","text":"Output shape: torch.Size([32, 3])\nLabels shape: torch.Size([32])\n","output_type":"stream"},{"name":"stderr","text":" 75%|███████▌  | 39/52 [00:53<00:17,  1.38s/it]","output_type":"stream"},{"name":"stdout","text":"Output shape: torch.Size([32, 3])\nLabels shape: torch.Size([32])\n","output_type":"stream"},{"name":"stderr","text":" 77%|███████▋  | 40/52 [00:55<00:16,  1.40s/it]","output_type":"stream"},{"name":"stdout","text":"Output shape: torch.Size([32, 3])\nLabels shape: torch.Size([32])\n","output_type":"stream"},{"name":"stderr","text":" 79%|███████▉  | 41/52 [00:56<00:15,  1.41s/it]","output_type":"stream"},{"name":"stdout","text":"Output shape: torch.Size([32, 3])\nLabels shape: torch.Size([32])\n","output_type":"stream"},{"name":"stderr","text":" 81%|████████  | 42/52 [00:58<00:14,  1.46s/it]","output_type":"stream"},{"name":"stdout","text":"Output shape: torch.Size([32, 3])\nLabels shape: torch.Size([32])\n","output_type":"stream"},{"name":"stderr","text":" 83%|████████▎ | 43/52 [00:59<00:12,  1.42s/it]","output_type":"stream"},{"name":"stdout","text":"Output shape: torch.Size([32, 3])\nLabels shape: torch.Size([32])\n","output_type":"stream"},{"name":"stderr","text":" 85%|████████▍ | 44/52 [01:00<00:11,  1.47s/it]","output_type":"stream"},{"name":"stdout","text":"Output shape: torch.Size([32, 3])\nLabels shape: torch.Size([32])\n","output_type":"stream"},{"name":"stderr","text":" 87%|████████▋ | 45/52 [01:02<00:10,  1.46s/it]","output_type":"stream"},{"name":"stdout","text":"Output shape: torch.Size([32, 3])\nLabels shape: torch.Size([32])\n","output_type":"stream"},{"name":"stderr","text":" 88%|████████▊ | 46/52 [01:03<00:08,  1.43s/it]","output_type":"stream"},{"name":"stdout","text":"Output shape: torch.Size([32, 3])\nLabels shape: torch.Size([32])\n","output_type":"stream"},{"name":"stderr","text":" 90%|█████████ | 47/52 [01:05<00:07,  1.43s/it]","output_type":"stream"},{"name":"stdout","text":"Output shape: torch.Size([32, 3])\nLabels shape: torch.Size([32])\n","output_type":"stream"},{"name":"stderr","text":" 92%|█████████▏| 48/52 [01:06<00:05,  1.43s/it]","output_type":"stream"},{"name":"stdout","text":"Output shape: torch.Size([32, 3])\nLabels shape: torch.Size([32])\n","output_type":"stream"},{"name":"stderr","text":" 94%|█████████▍| 49/52 [01:08<00:04,  1.45s/it]","output_type":"stream"},{"name":"stdout","text":"Output shape: torch.Size([32, 3])\nLabels shape: torch.Size([32])\n","output_type":"stream"},{"name":"stderr","text":" 96%|█████████▌| 50/52 [01:09<00:02,  1.41s/it]","output_type":"stream"},{"name":"stdout","text":"Output shape: torch.Size([32, 3])\nLabels shape: torch.Size([32])\n","output_type":"stream"},{"name":"stderr","text":" 98%|█████████▊| 51/52 [01:10<00:01,  1.41s/it]","output_type":"stream"},{"name":"stdout","text":"Output shape: torch.Size([19, 3])\nLabels shape: torch.Size([19])\n","output_type":"stream"},{"name":"stderr","text":"100%|██████████| 52/52 [01:11<00:00,  1.38s/it]\n","output_type":"stream"},{"name":"stdout","text":"Epoch 3, Train Loss: 0.08642643639961115\nValidation Output shape: torch.Size([32, 3])\nValidation Labels shape: torch.Size([32])\nValidation Output shape: torch.Size([32, 3])\nValidation Labels shape: torch.Size([32])\nValidation Output shape: torch.Size([32, 3])\nValidation Labels shape: torch.Size([32])\nValidation Output shape: torch.Size([32, 3])\nValidation Labels shape: torch.Size([32])\nValidation Output shape: torch.Size([32, 3])\nValidation Labels shape: torch.Size([32])\nValidation Output shape: torch.Size([32, 3])\nValidation Labels shape: torch.Size([32])\nValidation Output shape: torch.Size([32, 3])\nValidation Labels shape: torch.Size([32])\nValidation Output shape: torch.Size([32, 3])\nValidation Labels shape: torch.Size([32])\nValidation Output shape: torch.Size([32, 3])\nValidation Labels shape: torch.Size([32])\nValidation Output shape: torch.Size([32, 3])\nValidation Labels shape: torch.Size([32])\nValidation Output shape: torch.Size([32, 3])\nValidation Labels shape: torch.Size([32])\nValidation Output shape: torch.Size([32, 3])\nValidation Labels shape: torch.Size([32])\nValidation Output shape: torch.Size([32, 3])\nValidation Labels shape: torch.Size([32])\nValidation Output shape: torch.Size([32, 3])\nValidation Labels shape: torch.Size([32])\nValidation Output shape: torch.Size([32, 3])\nValidation Labels shape: torch.Size([32])\nValidation Output shape: torch.Size([32, 3])\nValidation Labels shape: torch.Size([32])\nValidation Output shape: torch.Size([32, 3])\nValidation Labels shape: torch.Size([32])\nValidation Output shape: torch.Size([7, 3])\nValidation Labels shape: torch.Size([7])\nEpoch 3, Validation Loss: 0.12454478815197945\n","output_type":"stream"},{"name":"stderr","text":"  0%|          | 0/52 [00:00<?, ?it/s]","output_type":"stream"},{"name":"stdout","text":"Output shape: torch.Size([32, 3])\nLabels shape: torch.Size([32])\n","output_type":"stream"},{"name":"stderr","text":"  2%|▏         | 1/52 [00:01<01:06,  1.30s/it]","output_type":"stream"},{"name":"stdout","text":"Output shape: torch.Size([32, 3])\nLabels shape: torch.Size([32])\n","output_type":"stream"},{"name":"stderr","text":"  4%|▍         | 2/52 [00:02<01:10,  1.41s/it]","output_type":"stream"},{"name":"stdout","text":"Output shape: torch.Size([32, 3])\nLabels shape: torch.Size([32])\n","output_type":"stream"},{"name":"stderr","text":"  6%|▌         | 3/52 [00:04<01:08,  1.40s/it]","output_type":"stream"},{"name":"stdout","text":"Output shape: torch.Size([32, 3])\nLabels shape: torch.Size([32])\n","output_type":"stream"},{"name":"stderr","text":"  8%|▊         | 4/52 [00:05<01:06,  1.38s/it]","output_type":"stream"},{"name":"stdout","text":"Output shape: torch.Size([32, 3])\nLabels shape: torch.Size([32])\n","output_type":"stream"},{"name":"stderr","text":" 10%|▉         | 5/52 [00:06<01:04,  1.38s/it]","output_type":"stream"},{"name":"stdout","text":"Output shape: torch.Size([32, 3])\nLabels shape: torch.Size([32])\n","output_type":"stream"},{"name":"stderr","text":" 12%|█▏        | 6/52 [00:08<01:04,  1.41s/it]","output_type":"stream"},{"name":"stdout","text":"Output shape: torch.Size([32, 3])\nLabels shape: torch.Size([32])\n","output_type":"stream"},{"name":"stderr","text":" 13%|█▎        | 7/52 [00:09<01:01,  1.37s/it]","output_type":"stream"},{"name":"stdout","text":"Output shape: torch.Size([32, 3])\nLabels shape: torch.Size([32])\n","output_type":"stream"},{"name":"stderr","text":" 15%|█▌        | 8/52 [00:11<01:00,  1.37s/it]","output_type":"stream"},{"name":"stdout","text":"Output shape: torch.Size([32, 3])\nLabels shape: torch.Size([32])\n","output_type":"stream"},{"name":"stderr","text":" 17%|█▋        | 9/52 [00:12<00:58,  1.36s/it]","output_type":"stream"},{"name":"stdout","text":"Output shape: torch.Size([32, 3])\nLabels shape: torch.Size([32])\n","output_type":"stream"},{"name":"stderr","text":" 19%|█▉        | 10/52 [00:13<00:57,  1.38s/it]","output_type":"stream"},{"name":"stdout","text":"Output shape: torch.Size([32, 3])\nLabels shape: torch.Size([32])\n","output_type":"stream"},{"name":"stderr","text":" 21%|██        | 11/52 [00:15<00:59,  1.44s/it]","output_type":"stream"},{"name":"stdout","text":"Output shape: torch.Size([32, 3])\nLabels shape: torch.Size([32])\n","output_type":"stream"},{"name":"stderr","text":" 23%|██▎       | 12/52 [00:16<00:57,  1.44s/it]","output_type":"stream"},{"name":"stdout","text":"Output shape: torch.Size([32, 3])\nLabels shape: torch.Size([32])\n","output_type":"stream"},{"name":"stderr","text":" 25%|██▌       | 13/52 [00:18<00:56,  1.44s/it]","output_type":"stream"},{"name":"stdout","text":"Output shape: torch.Size([32, 3])\nLabels shape: torch.Size([32])\n","output_type":"stream"},{"name":"stderr","text":" 27%|██▋       | 14/52 [00:19<00:54,  1.43s/it]","output_type":"stream"},{"name":"stdout","text":"Output shape: torch.Size([32, 3])\nLabels shape: torch.Size([32])\n","output_type":"stream"},{"name":"stderr","text":" 29%|██▉       | 15/52 [00:21<00:52,  1.43s/it]","output_type":"stream"},{"name":"stdout","text":"Output shape: torch.Size([32, 3])\nLabels shape: torch.Size([32])\n","output_type":"stream"},{"name":"stderr","text":" 31%|███       | 16/52 [00:22<00:52,  1.46s/it]","output_type":"stream"},{"name":"stdout","text":"Output shape: torch.Size([32, 3])\nLabels shape: torch.Size([32])\n","output_type":"stream"},{"name":"stderr","text":" 33%|███▎      | 17/52 [00:23<00:49,  1.42s/it]","output_type":"stream"},{"name":"stdout","text":"Output shape: torch.Size([32, 3])\nLabels shape: torch.Size([32])\n","output_type":"stream"},{"name":"stderr","text":" 35%|███▍      | 18/52 [00:25<00:47,  1.41s/it]","output_type":"stream"},{"name":"stdout","text":"Output shape: torch.Size([32, 3])\nLabels shape: torch.Size([32])\n","output_type":"stream"},{"name":"stderr","text":" 37%|███▋      | 19/52 [00:26<00:46,  1.41s/it]","output_type":"stream"},{"name":"stdout","text":"Output shape: torch.Size([32, 3])\nLabels shape: torch.Size([32])\n","output_type":"stream"},{"name":"stderr","text":" 38%|███▊      | 20/52 [00:28<00:44,  1.40s/it]","output_type":"stream"},{"name":"stdout","text":"Output shape: torch.Size([32, 3])\nLabels shape: torch.Size([32])\n","output_type":"stream"},{"name":"stderr","text":" 40%|████      | 21/52 [00:29<00:42,  1.37s/it]","output_type":"stream"},{"name":"stdout","text":"Output shape: torch.Size([32, 3])\nLabels shape: torch.Size([32])\n","output_type":"stream"},{"name":"stderr","text":" 42%|████▏     | 22/52 [00:30<00:41,  1.38s/it]","output_type":"stream"},{"name":"stdout","text":"Output shape: torch.Size([32, 3])\nLabels shape: torch.Size([32])\n","output_type":"stream"},{"name":"stderr","text":" 44%|████▍     | 23/52 [00:32<00:39,  1.37s/it]","output_type":"stream"},{"name":"stdout","text":"Output shape: torch.Size([32, 3])\nLabels shape: torch.Size([32])\n","output_type":"stream"},{"name":"stderr","text":" 46%|████▌     | 24/52 [00:33<00:38,  1.36s/it]","output_type":"stream"},{"name":"stdout","text":"Output shape: torch.Size([32, 3])\nLabels shape: torch.Size([32])\n","output_type":"stream"},{"name":"stderr","text":" 48%|████▊     | 25/52 [00:34<00:36,  1.35s/it]","output_type":"stream"},{"name":"stdout","text":"Output shape: torch.Size([32, 3])\nLabels shape: torch.Size([32])\n","output_type":"stream"},{"name":"stderr","text":" 50%|█████     | 26/52 [00:36<00:35,  1.38s/it]","output_type":"stream"},{"name":"stdout","text":"Output shape: torch.Size([32, 3])\nLabels shape: torch.Size([32])\n","output_type":"stream"},{"name":"stderr","text":" 52%|█████▏    | 27/52 [00:37<00:34,  1.37s/it]","output_type":"stream"},{"name":"stdout","text":"Output shape: torch.Size([32, 3])\nLabels shape: torch.Size([32])\n","output_type":"stream"},{"name":"stderr","text":" 54%|█████▍    | 28/52 [00:39<00:32,  1.37s/it]","output_type":"stream"},{"name":"stdout","text":"Output shape: torch.Size([32, 3])\nLabels shape: torch.Size([32])\n","output_type":"stream"},{"name":"stderr","text":" 56%|█████▌    | 29/52 [00:40<00:32,  1.40s/it]","output_type":"stream"},{"name":"stdout","text":"Output shape: torch.Size([32, 3])\nLabels shape: torch.Size([32])\n","output_type":"stream"},{"name":"stderr","text":" 58%|█████▊    | 30/52 [00:41<00:30,  1.37s/it]","output_type":"stream"},{"name":"stdout","text":"Output shape: torch.Size([32, 3])\nLabels shape: torch.Size([32])\n","output_type":"stream"},{"name":"stderr","text":" 60%|█████▉    | 31/52 [00:43<00:28,  1.35s/it]","output_type":"stream"},{"name":"stdout","text":"Output shape: torch.Size([32, 3])\nLabels shape: torch.Size([32])\n","output_type":"stream"},{"name":"stderr","text":" 62%|██████▏   | 32/52 [00:44<00:28,  1.44s/it]","output_type":"stream"},{"name":"stdout","text":"Output shape: torch.Size([32, 3])\nLabels shape: torch.Size([32])\n","output_type":"stream"},{"name":"stderr","text":" 63%|██████▎   | 33/52 [00:46<00:26,  1.41s/it]","output_type":"stream"},{"name":"stdout","text":"Output shape: torch.Size([32, 3])\nLabels shape: torch.Size([32])\n","output_type":"stream"},{"name":"stderr","text":" 65%|██████▌   | 34/52 [00:47<00:24,  1.38s/it]","output_type":"stream"},{"name":"stdout","text":"Output shape: torch.Size([32, 3])\nLabels shape: torch.Size([32])\n","output_type":"stream"},{"name":"stderr","text":" 67%|██████▋   | 35/52 [00:48<00:23,  1.36s/it]","output_type":"stream"},{"name":"stdout","text":"Output shape: torch.Size([32, 3])\nLabels shape: torch.Size([32])\n","output_type":"stream"},{"name":"stderr","text":" 69%|██████▉   | 36/52 [00:50<00:22,  1.39s/it]","output_type":"stream"},{"name":"stdout","text":"Output shape: torch.Size([32, 3])\nLabels shape: torch.Size([32])\n","output_type":"stream"},{"name":"stderr","text":" 71%|███████   | 37/52 [00:51<00:20,  1.39s/it]","output_type":"stream"},{"name":"stdout","text":"Output shape: torch.Size([32, 3])\nLabels shape: torch.Size([32])\n","output_type":"stream"},{"name":"stderr","text":" 73%|███████▎  | 38/52 [00:52<00:19,  1.39s/it]","output_type":"stream"},{"name":"stdout","text":"Output shape: torch.Size([32, 3])\nLabels shape: torch.Size([32])\n","output_type":"stream"},{"name":"stderr","text":" 75%|███████▌  | 39/52 [00:54<00:18,  1.39s/it]","output_type":"stream"},{"name":"stdout","text":"Output shape: torch.Size([32, 3])\nLabels shape: torch.Size([32])\n","output_type":"stream"},{"name":"stderr","text":" 77%|███████▋  | 40/52 [00:55<00:16,  1.36s/it]","output_type":"stream"},{"name":"stdout","text":"Output shape: torch.Size([32, 3])\nLabels shape: torch.Size([32])\n","output_type":"stream"},{"name":"stderr","text":" 79%|███████▉  | 41/52 [00:56<00:14,  1.35s/it]","output_type":"stream"},{"name":"stdout","text":"Output shape: torch.Size([32, 3])\nLabels shape: torch.Size([32])\n","output_type":"stream"},{"name":"stderr","text":" 81%|████████  | 42/52 [00:58<00:13,  1.38s/it]","output_type":"stream"},{"name":"stdout","text":"Output shape: torch.Size([32, 3])\nLabels shape: torch.Size([32])\n","output_type":"stream"},{"name":"stderr","text":" 83%|████████▎ | 43/52 [00:59<00:12,  1.37s/it]","output_type":"stream"},{"name":"stdout","text":"Output shape: torch.Size([32, 3])\nLabels shape: torch.Size([32])\n","output_type":"stream"},{"name":"stderr","text":" 85%|████████▍ | 44/52 [01:01<00:10,  1.37s/it]","output_type":"stream"},{"name":"stdout","text":"Output shape: torch.Size([32, 3])\nLabels shape: torch.Size([32])\n","output_type":"stream"},{"name":"stderr","text":" 87%|████████▋ | 45/52 [01:02<00:09,  1.38s/it]","output_type":"stream"},{"name":"stdout","text":"Output shape: torch.Size([32, 3])\nLabels shape: torch.Size([32])\n","output_type":"stream"},{"name":"stderr","text":" 88%|████████▊ | 46/52 [01:03<00:08,  1.38s/it]","output_type":"stream"},{"name":"stdout","text":"Output shape: torch.Size([32, 3])\nLabels shape: torch.Size([32])\n","output_type":"stream"},{"name":"stderr","text":" 90%|█████████ | 47/52 [01:05<00:06,  1.39s/it]","output_type":"stream"},{"name":"stdout","text":"Output shape: torch.Size([32, 3])\nLabels shape: torch.Size([32])\n","output_type":"stream"},{"name":"stderr","text":" 92%|█████████▏| 48/52 [01:06<00:05,  1.39s/it]","output_type":"stream"},{"name":"stdout","text":"Output shape: torch.Size([32, 3])\nLabels shape: torch.Size([32])\n","output_type":"stream"},{"name":"stderr","text":" 94%|█████████▍| 49/52 [01:08<00:04,  1.41s/it]","output_type":"stream"},{"name":"stdout","text":"Output shape: torch.Size([32, 3])\nLabels shape: torch.Size([32])\n","output_type":"stream"},{"name":"stderr","text":" 96%|█████████▌| 50/52 [01:09<00:02,  1.39s/it]","output_type":"stream"},{"name":"stdout","text":"Output shape: torch.Size([32, 3])\nLabels shape: torch.Size([32])\n","output_type":"stream"},{"name":"stderr","text":" 98%|█████████▊| 51/52 [01:10<00:01,  1.42s/it]","output_type":"stream"},{"name":"stdout","text":"Output shape: torch.Size([19, 3])\nLabels shape: torch.Size([19])\n","output_type":"stream"},{"name":"stderr","text":"100%|██████████| 52/52 [01:11<00:00,  1.38s/it]\n","output_type":"stream"},{"name":"stdout","text":"Epoch 4, Train Loss: 0.043382679094345525\nValidation Output shape: torch.Size([32, 3])\nValidation Labels shape: torch.Size([32])\nValidation Output shape: torch.Size([32, 3])\nValidation Labels shape: torch.Size([32])\nValidation Output shape: torch.Size([32, 3])\nValidation Labels shape: torch.Size([32])\nValidation Output shape: torch.Size([32, 3])\nValidation Labels shape: torch.Size([32])\nValidation Output shape: torch.Size([32, 3])\nValidation Labels shape: torch.Size([32])\nValidation Output shape: torch.Size([32, 3])\nValidation Labels shape: torch.Size([32])\nValidation Output shape: torch.Size([32, 3])\nValidation Labels shape: torch.Size([32])\nValidation Output shape: torch.Size([32, 3])\nValidation Labels shape: torch.Size([32])\nValidation Output shape: torch.Size([32, 3])\nValidation Labels shape: torch.Size([32])\nValidation Output shape: torch.Size([32, 3])\nValidation Labels shape: torch.Size([32])\nValidation Output shape: torch.Size([32, 3])\nValidation Labels shape: torch.Size([32])\nValidation Output shape: torch.Size([32, 3])\nValidation Labels shape: torch.Size([32])\nValidation Output shape: torch.Size([32, 3])\nValidation Labels shape: torch.Size([32])\nValidation Output shape: torch.Size([32, 3])\nValidation Labels shape: torch.Size([32])\nValidation Output shape: torch.Size([32, 3])\nValidation Labels shape: torch.Size([32])\nValidation Output shape: torch.Size([32, 3])\nValidation Labels shape: torch.Size([32])\nValidation Output shape: torch.Size([32, 3])\nValidation Labels shape: torch.Size([32])\nValidation Output shape: torch.Size([7, 3])\nValidation Labels shape: torch.Size([7])\nEpoch 4, Validation Loss: 0.06684781248784727\n","output_type":"stream"},{"name":"stderr","text":"  0%|          | 0/52 [00:00<?, ?it/s]","output_type":"stream"},{"name":"stdout","text":"Output shape: torch.Size([32, 3])\nLabels shape: torch.Size([32])\n","output_type":"stream"},{"name":"stderr","text":"  2%|▏         | 1/52 [00:01<01:13,  1.44s/it]","output_type":"stream"},{"name":"stdout","text":"Output shape: torch.Size([32, 3])\nLabels shape: torch.Size([32])\n","output_type":"stream"},{"name":"stderr","text":"  4%|▍         | 2/52 [00:02<01:09,  1.39s/it]","output_type":"stream"},{"name":"stdout","text":"Output shape: torch.Size([32, 3])\nLabels shape: torch.Size([32])\n","output_type":"stream"},{"name":"stderr","text":"  6%|▌         | 3/52 [00:04<01:04,  1.32s/it]","output_type":"stream"},{"name":"stdout","text":"Output shape: torch.Size([32, 3])\nLabels shape: torch.Size([32])\n","output_type":"stream"},{"name":"stderr","text":"  8%|▊         | 4/52 [00:05<01:05,  1.37s/it]","output_type":"stream"},{"name":"stdout","text":"Output shape: torch.Size([32, 3])\nLabels shape: torch.Size([32])\n","output_type":"stream"},{"name":"stderr","text":" 10%|▉         | 5/52 [00:06<01:02,  1.34s/it]","output_type":"stream"},{"name":"stdout","text":"Output shape: torch.Size([32, 3])\nLabels shape: torch.Size([32])\n","output_type":"stream"},{"name":"stderr","text":" 12%|█▏        | 6/52 [00:08<01:03,  1.38s/it]","output_type":"stream"},{"name":"stdout","text":"Output shape: torch.Size([32, 3])\nLabels shape: torch.Size([32])\n","output_type":"stream"},{"name":"stderr","text":" 13%|█▎        | 7/52 [00:09<01:03,  1.42s/it]","output_type":"stream"},{"name":"stdout","text":"Output shape: torch.Size([32, 3])\nLabels shape: torch.Size([32])\n","output_type":"stream"},{"name":"stderr","text":" 15%|█▌        | 8/52 [00:11<01:01,  1.40s/it]","output_type":"stream"},{"name":"stdout","text":"Output shape: torch.Size([32, 3])\nLabels shape: torch.Size([32])\n","output_type":"stream"},{"name":"stderr","text":" 17%|█▋        | 9/52 [00:12<00:59,  1.37s/it]","output_type":"stream"},{"name":"stdout","text":"Output shape: torch.Size([32, 3])\nLabels shape: torch.Size([32])\n","output_type":"stream"},{"name":"stderr","text":" 19%|█▉        | 10/52 [00:13<00:56,  1.35s/it]","output_type":"stream"},{"name":"stdout","text":"Output shape: torch.Size([32, 3])\nLabels shape: torch.Size([32])\n","output_type":"stream"},{"name":"stderr","text":" 21%|██        | 11/52 [00:15<00:55,  1.34s/it]","output_type":"stream"},{"name":"stdout","text":"Output shape: torch.Size([32, 3])\nLabels shape: torch.Size([32])\n","output_type":"stream"},{"name":"stderr","text":" 23%|██▎       | 12/52 [00:16<00:54,  1.37s/it]","output_type":"stream"},{"name":"stdout","text":"Output shape: torch.Size([32, 3])\nLabels shape: torch.Size([32])\n","output_type":"stream"},{"name":"stderr","text":" 25%|██▌       | 13/52 [00:17<00:53,  1.36s/it]","output_type":"stream"},{"name":"stdout","text":"Output shape: torch.Size([32, 3])\nLabels shape: torch.Size([32])\n","output_type":"stream"},{"name":"stderr","text":" 27%|██▋       | 14/52 [00:19<00:52,  1.37s/it]","output_type":"stream"},{"name":"stdout","text":"Output shape: torch.Size([32, 3])\nLabels shape: torch.Size([32])\n","output_type":"stream"},{"name":"stderr","text":" 29%|██▉       | 15/52 [00:20<00:50,  1.37s/it]","output_type":"stream"},{"name":"stdout","text":"Output shape: torch.Size([32, 3])\nLabels shape: torch.Size([32])\n","output_type":"stream"},{"name":"stderr","text":" 31%|███       | 16/52 [00:21<00:49,  1.37s/it]","output_type":"stream"},{"name":"stdout","text":"Output shape: torch.Size([32, 3])\nLabels shape: torch.Size([32])\n","output_type":"stream"},{"name":"stderr","text":" 33%|███▎      | 17/52 [00:23<00:47,  1.34s/it]","output_type":"stream"},{"name":"stdout","text":"Output shape: torch.Size([32, 3])\nLabels shape: torch.Size([32])\n","output_type":"stream"},{"name":"stderr","text":" 35%|███▍      | 18/52 [00:24<00:46,  1.37s/it]","output_type":"stream"},{"name":"stdout","text":"Output shape: torch.Size([32, 3])\nLabels shape: torch.Size([32])\n","output_type":"stream"},{"name":"stderr","text":" 37%|███▋      | 19/52 [00:25<00:44,  1.35s/it]","output_type":"stream"},{"name":"stdout","text":"Output shape: torch.Size([32, 3])\nLabels shape: torch.Size([32])\n","output_type":"stream"},{"name":"stderr","text":" 38%|███▊      | 20/52 [00:27<00:43,  1.35s/it]","output_type":"stream"},{"name":"stdout","text":"Output shape: torch.Size([32, 3])\nLabels shape: torch.Size([32])\n","output_type":"stream"},{"name":"stderr","text":" 40%|████      | 21/52 [00:28<00:42,  1.36s/it]","output_type":"stream"},{"name":"stdout","text":"Output shape: torch.Size([32, 3])\nLabels shape: torch.Size([32])\n","output_type":"stream"},{"name":"stderr","text":" 42%|████▏     | 22/52 [00:30<00:40,  1.35s/it]","output_type":"stream"},{"name":"stdout","text":"Output shape: torch.Size([32, 3])\nLabels shape: torch.Size([32])\n","output_type":"stream"},{"name":"stderr","text":" 44%|████▍     | 23/52 [00:31<00:39,  1.36s/it]","output_type":"stream"},{"name":"stdout","text":"Output shape: torch.Size([32, 3])\nLabels shape: torch.Size([32])\n","output_type":"stream"},{"name":"stderr","text":" 46%|████▌     | 24/52 [00:32<00:37,  1.35s/it]","output_type":"stream"},{"name":"stdout","text":"Output shape: torch.Size([32, 3])\nLabels shape: torch.Size([32])\n","output_type":"stream"},{"name":"stderr","text":" 48%|████▊     | 25/52 [00:34<00:37,  1.39s/it]","output_type":"stream"},{"name":"stdout","text":"Output shape: torch.Size([32, 3])\nLabels shape: torch.Size([32])\n","output_type":"stream"},{"name":"stderr","text":" 50%|█████     | 26/52 [00:35<00:36,  1.40s/it]","output_type":"stream"},{"name":"stdout","text":"Output shape: torch.Size([32, 3])\nLabels shape: torch.Size([32])\n","output_type":"stream"},{"name":"stderr","text":" 52%|█████▏    | 27/52 [00:37<00:37,  1.50s/it]","output_type":"stream"},{"name":"stdout","text":"Output shape: torch.Size([32, 3])\nLabels shape: torch.Size([32])\n","output_type":"stream"},{"name":"stderr","text":" 54%|█████▍    | 28/52 [00:38<00:35,  1.48s/it]","output_type":"stream"},{"name":"stdout","text":"Output shape: torch.Size([32, 3])\nLabels shape: torch.Size([32])\n","output_type":"stream"},{"name":"stderr","text":" 56%|█████▌    | 29/52 [00:40<00:33,  1.45s/it]","output_type":"stream"},{"name":"stdout","text":"Output shape: torch.Size([32, 3])\nLabels shape: torch.Size([32])\n","output_type":"stream"},{"name":"stderr","text":" 58%|█████▊    | 30/52 [00:41<00:31,  1.43s/it]","output_type":"stream"},{"name":"stdout","text":"Output shape: torch.Size([32, 3])\nLabels shape: torch.Size([32])\n","output_type":"stream"},{"name":"stderr","text":" 60%|█████▉    | 31/52 [00:42<00:29,  1.42s/it]","output_type":"stream"},{"name":"stdout","text":"Output shape: torch.Size([32, 3])\nLabels shape: torch.Size([32])\n","output_type":"stream"},{"name":"stderr","text":" 62%|██████▏   | 32/52 [00:44<00:29,  1.46s/it]","output_type":"stream"},{"name":"stdout","text":"Output shape: torch.Size([32, 3])\nLabels shape: torch.Size([32])\n","output_type":"stream"},{"name":"stderr","text":" 63%|██████▎   | 33/52 [00:45<00:27,  1.44s/it]","output_type":"stream"},{"name":"stdout","text":"Output shape: torch.Size([32, 3])\nLabels shape: torch.Size([32])\n","output_type":"stream"},{"name":"stderr","text":" 65%|██████▌   | 34/52 [00:47<00:25,  1.39s/it]","output_type":"stream"},{"name":"stdout","text":"Output shape: torch.Size([32, 3])\nLabels shape: torch.Size([32])\n","output_type":"stream"},{"name":"stderr","text":" 67%|██████▋   | 35/52 [00:48<00:23,  1.40s/it]","output_type":"stream"},{"name":"stdout","text":"Output shape: torch.Size([32, 3])\nLabels shape: torch.Size([32])\n","output_type":"stream"},{"name":"stderr","text":" 69%|██████▉   | 36/52 [00:49<00:22,  1.40s/it]","output_type":"stream"},{"name":"stdout","text":"Output shape: torch.Size([32, 3])\nLabels shape: torch.Size([32])\n","output_type":"stream"},{"name":"stderr","text":" 71%|███████   | 37/52 [00:51<00:21,  1.41s/it]","output_type":"stream"},{"name":"stdout","text":"Output shape: torch.Size([32, 3])\nLabels shape: torch.Size([32])\n","output_type":"stream"},{"name":"stderr","text":" 73%|███████▎  | 38/52 [00:52<00:19,  1.40s/it]","output_type":"stream"},{"name":"stdout","text":"Output shape: torch.Size([32, 3])\nLabels shape: torch.Size([32])\n","output_type":"stream"},{"name":"stderr","text":" 75%|███████▌  | 39/52 [00:54<00:18,  1.39s/it]","output_type":"stream"},{"name":"stdout","text":"Output shape: torch.Size([32, 3])\nLabels shape: torch.Size([32])\n","output_type":"stream"},{"name":"stderr","text":" 77%|███████▋  | 40/52 [00:55<00:16,  1.36s/it]","output_type":"stream"},{"name":"stdout","text":"Output shape: torch.Size([32, 3])\nLabels shape: torch.Size([32])\n","output_type":"stream"},{"name":"stderr","text":" 79%|███████▉  | 41/52 [00:56<00:15,  1.37s/it]","output_type":"stream"},{"name":"stdout","text":"Output shape: torch.Size([32, 3])\nLabels shape: torch.Size([32])\n","output_type":"stream"},{"name":"stderr","text":" 81%|████████  | 42/52 [00:58<00:13,  1.35s/it]","output_type":"stream"},{"name":"stdout","text":"Output shape: torch.Size([32, 3])\nLabels shape: torch.Size([32])\n","output_type":"stream"},{"name":"stderr","text":" 83%|████████▎ | 43/52 [00:59<00:12,  1.39s/it]","output_type":"stream"},{"name":"stdout","text":"Output shape: torch.Size([32, 3])\nLabels shape: torch.Size([32])\n","output_type":"stream"},{"name":"stderr","text":" 85%|████████▍ | 44/52 [01:00<00:10,  1.37s/it]","output_type":"stream"},{"name":"stdout","text":"Output shape: torch.Size([32, 3])\nLabels shape: torch.Size([32])\n","output_type":"stream"},{"name":"stderr","text":" 87%|████████▋ | 45/52 [01:02<00:09,  1.35s/it]","output_type":"stream"},{"name":"stdout","text":"Output shape: torch.Size([32, 3])\nLabels shape: torch.Size([32])\n","output_type":"stream"},{"name":"stderr","text":" 88%|████████▊ | 46/52 [01:03<00:08,  1.35s/it]","output_type":"stream"},{"name":"stdout","text":"Output shape: torch.Size([32, 3])\nLabels shape: torch.Size([32])\n","output_type":"stream"},{"name":"stderr","text":" 90%|█████████ | 47/52 [01:04<00:06,  1.35s/it]","output_type":"stream"},{"name":"stdout","text":"Output shape: torch.Size([32, 3])\nLabels shape: torch.Size([32])\n","output_type":"stream"},{"name":"stderr","text":" 92%|█████████▏| 48/52 [01:06<00:05,  1.34s/it]","output_type":"stream"},{"name":"stdout","text":"Output shape: torch.Size([32, 3])\nLabels shape: torch.Size([32])\n","output_type":"stream"},{"name":"stderr","text":" 94%|█████████▍| 49/52 [01:07<00:04,  1.43s/it]","output_type":"stream"},{"name":"stdout","text":"Output shape: torch.Size([32, 3])\nLabels shape: torch.Size([32])\n","output_type":"stream"},{"name":"stderr","text":" 96%|█████████▌| 50/52 [01:09<00:02,  1.40s/it]","output_type":"stream"},{"name":"stdout","text":"Output shape: torch.Size([32, 3])\nLabels shape: torch.Size([32])\n","output_type":"stream"},{"name":"stderr","text":" 98%|█████████▊| 51/52 [01:10<00:01,  1.41s/it]","output_type":"stream"},{"name":"stdout","text":"Output shape: torch.Size([19, 3])\nLabels shape: torch.Size([19])\n","output_type":"stream"},{"name":"stderr","text":"100%|██████████| 52/52 [01:11<00:00,  1.38s/it]\n","output_type":"stream"},{"name":"stdout","text":"Epoch 5, Train Loss: 0.021855165626710422\nValidation Output shape: torch.Size([32, 3])\nValidation Labels shape: torch.Size([32])\nValidation Output shape: torch.Size([32, 3])\nValidation Labels shape: torch.Size([32])\nValidation Output shape: torch.Size([32, 3])\nValidation Labels shape: torch.Size([32])\nValidation Output shape: torch.Size([32, 3])\nValidation Labels shape: torch.Size([32])\nValidation Output shape: torch.Size([32, 3])\nValidation Labels shape: torch.Size([32])\nValidation Output shape: torch.Size([32, 3])\nValidation Labels shape: torch.Size([32])\nValidation Output shape: torch.Size([32, 3])\nValidation Labels shape: torch.Size([32])\nValidation Output shape: torch.Size([32, 3])\nValidation Labels shape: torch.Size([32])\nValidation Output shape: torch.Size([32, 3])\nValidation Labels shape: torch.Size([32])\nValidation Output shape: torch.Size([32, 3])\nValidation Labels shape: torch.Size([32])\nValidation Output shape: torch.Size([32, 3])\nValidation Labels shape: torch.Size([32])\nValidation Output shape: torch.Size([32, 3])\nValidation Labels shape: torch.Size([32])\nValidation Output shape: torch.Size([32, 3])\nValidation Labels shape: torch.Size([32])\nValidation Output shape: torch.Size([32, 3])\nValidation Labels shape: torch.Size([32])\nValidation Output shape: torch.Size([32, 3])\nValidation Labels shape: torch.Size([32])\nValidation Output shape: torch.Size([32, 3])\nValidation Labels shape: torch.Size([32])\nValidation Output shape: torch.Size([32, 3])\nValidation Labels shape: torch.Size([32])\nValidation Output shape: torch.Size([7, 3])\nValidation Labels shape: torch.Size([7])\nEpoch 5, Validation Loss: 0.05926037688429157\n","output_type":"stream"}],"execution_count":40},{"cell_type":"code","source":"import torch\nfrom sklearn.metrics import accuracy_score, precision_score, recall_score, f1_score, classification_report, confusion_matrix\nimport matplotlib.pyplot as plt\nimport seaborn as sns","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-03-23T16:00:21.613908Z","iopub.execute_input":"2025-03-23T16:00:21.614109Z","iopub.status.idle":"2025-03-23T16:00:21.618143Z","shell.execute_reply.started":"2025-03-23T16:00:21.614089Z","shell.execute_reply":"2025-03-23T16:00:21.617337Z"}},"outputs":[],"execution_count":41},{"cell_type":"code","source":"def evaluate_model(model, test_loader):\n    model.eval()\n    all_preds = []\n    all_labels = []\n\n    with torch.no_grad():\n        for batch in test_loader:\n            input_ids = batch['input_ids'].to(device)\n            attention_mask = batch['attention_mask'].to(device)\n            images = batch['image'].to(device)\n            labels = batch['label'].to(device)\n\n            outputs = model(input_ids, attention_mask, images)\n            _, preds = torch.max(outputs, dim=1)\n\n            all_preds.extend(preds.cpu().numpy())\n            all_labels.extend(labels.cpu().numpy())\n\n    all_labels = ['Informative' if label == 1 else 'Non Informative' for label in all_labels]\n    all_preds = ['Informative' if pred == 1 else 'Non Informative' for pred in all_preds]\n    accuracy = accuracy_score(all_labels, all_preds)\n    precision = precision_score(all_labels, all_preds, average='weighted')\n    recall = recall_score(all_labels, all_preds, average='weighted')\n    f1 = f1_score(all_labels, all_preds, average='weighted')\n    report = classification_report(all_labels, all_preds)\n\n    return accuracy, precision, recall, f1, report, all_labels, all_preds","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-03-23T16:00:21.618948Z","iopub.execute_input":"2025-03-23T16:00:21.619258Z","iopub.status.idle":"2025-03-23T16:00:21.633023Z","shell.execute_reply.started":"2025-03-23T16:00:21.619197Z","shell.execute_reply":"2025-03-23T16:00:21.632407Z"}},"outputs":[],"execution_count":42},{"cell_type":"code","source":"test_accuracy, test_precision, test_recall, test_f1, test_report, all_labels, all_preds = evaluate_model(model, test_loader)\n\nprint(f\"Test Accuracy: {test_accuracy}\")\nprint(f\"Test Precision: {test_precision}\")\nprint(f\"Test Recall: {test_recall}\")\nprint(f\"Test F1 Score: {test_f1}\")\nprint(\"Classification Report:\\n\", test_report)\n\n# Plot the confusion matrix\n#plot_confusion_matrix(all_labels, all_preds)","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-03-23T16:00:21.634006Z","iopub.execute_input":"2025-03-23T16:00:21.634340Z","iopub.status.idle":"2025-03-23T16:00:35.024655Z","shell.execute_reply.started":"2025-03-23T16:00:21.634310Z","shell.execute_reply":"2025-03-23T16:00:35.023703Z"}},"outputs":[{"name":"stdout","text":"Test Accuracy: 0.9782214156079855\nTest Precision: 0.9781927355935865\nTest Recall: 0.9782214156079855\nTest F1 Score: 0.9781927047035359\nClassification Report:\n                  precision    recall  f1-score   support\n\n    Informative       0.98      0.99      0.98       364\nNon Informative       0.97      0.96      0.97       187\n\n       accuracy                           0.98       551\n      macro avg       0.98      0.97      0.98       551\n   weighted avg       0.98      0.98      0.98       551\n\n","output_type":"stream"}],"execution_count":43},{"cell_type":"code","source":"def plot_confusion_matrix(all_labels, all_preds):\n    labels = ['Informative', 'Non Informative ']\n    cm = confusion_matrix(all_labels, all_preds, labels=labels)\n    plt.figure(figsize=(8, 5))\n    sns.heatmap(cm, annot=True, fmt='d', cmap='Blues', xticklabels=labels, yticklabels=labels)\n    plt.xlabel('Predicted')\n    plt.ylabel('True')\n    plt.title('Confusion Matrix')\n    plt.show()","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-03-23T16:00:35.025603Z","iopub.execute_input":"2025-03-23T16:00:35.025903Z","iopub.status.idle":"2025-03-23T16:00:35.030392Z","shell.execute_reply.started":"2025-03-23T16:00:35.025877Z","shell.execute_reply":"2025-03-23T16:00:35.029398Z"}},"outputs":[],"execution_count":44},{"cell_type":"code","source":"import seaborn as sns\nimport matplotlib.pyplot as plt\nfrom sklearn.metrics import confusion_matrix\n\ndef plot_confusion_matrix(all_labels, all_preds):\n    labels = ['Informative', 'Non Informative']  # Fix the extra space in \"Non Informative\"\n    \n    # Compute confusion matrix\n    cm = confusion_matrix(all_labels, all_preds, labels=labels)\n\n    # Plot confusion matrix\n    plt.figure(figsize=(6, 5))\n    sns.heatmap(cm, annot=True, fmt='d', cmap='Blues', xticklabels=labels, yticklabels=labels)\n\n    plt.xlabel('Predicted')\n    plt.ylabel('True')\n    plt.title('Confusion Matrix')\n    plt.show()\n\n# Call the function (ensure all_labels and all_preds exist)\nplot_confusion_matrix(all_labels, all_preds)\n","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-03-23T16:00:35.031247Z","iopub.execute_input":"2025-03-23T16:00:35.031490Z","iopub.status.idle":"2025-03-23T16:00:35.232093Z","shell.execute_reply.started":"2025-03-23T16:00:35.031468Z","shell.execute_reply":"2025-03-23T16:00:35.231218Z"}},"outputs":[{"output_type":"display_data","data":{"text/plain":"<Figure size 600x500 with 2 Axes>","image/png":"\n"},"metadata":{}}],"execution_count":45},{"cell_type":"code","source":"import matplotlib.pyplot as plt\nimport matplotlib.font_manager as fm\nfrom sklearn.feature_extraction.text import CountVectorizer\n\n# Define Bangla stop words\nbangla_stop_words = ['এবং', 'কিন্তু', 'যদি', 'এই', 'তারপর', 'জন্য', 'একটি', 'কোন', 'সাথে', 'হতে', 'বা', 'তাই', 'যখন', 'তাদের', 'অনেক', 'হয়', 'করেছে']\n\n# Assuming you have a DataFrame `df` with a column 'caption' containing the Bangla text\n# Vectorizer for Bangla text\nvectorizer = CountVectorizer(stop_words=bangla_stop_words, max_features=20)\nX = vectorizer.fit_transform(df['caption'])  # Adjust the column name if necessary\n\n# Get the words and their counts\nwords = vectorizer.get_feature_names_out()\nword_count = X.sum(axis=0).A1  # Sum across the rows for word frequency\n\n# Create a dictionary of word frequencies\nword_freq = dict(zip(words, word_count))\n\n# Set the correct font path (ensure correct path is used)\nfont_path = \"/usr/share/fonts/truetype/noto/NotoSansBengali-Regular.ttf\"  # Path for Kaggle\nfont_prop = fm.FontProperties(fname=font_path)\n\n# Plot the top 20 frequent words\nplt.figure(figsize=(12, 6))\nplt.barh(list(word_freq.keys()), list(word_freq.values()), color='orange')\n\n# Apply the Bangla font to the plot\nplt.xlabel('Frequency', fontsize=12)\nplt.ylabel('Words (Bangla)', fontsize=12, fontproperties=font_prop)\nplt.title('🔹 Top 20 Frequent Words in Disaster-Related Bangla Text 🔹', fontsize=14, fontproperties=font_prop)\n\nplt.gca().invert_yaxis()  # To show the highest frequency word at the top\nplt.show()\n","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-03-23T16:04:56.342813Z","iopub.execute_input":"2025-03-23T16:04:56.343149Z","iopub.status.idle":"2025-03-23T16:04:56.645842Z","shell.execute_reply.started":"2025-03-23T16:04:56.343125Z","shell.execute_reply":"2025-03-23T16:04:56.645034Z"}},"outputs":[{"output_type":"display_data","data":{"text/plain":"<Figure size 1200x600 with 1 Axes>","image/png":"\n"},"metadata":{}}],"execution_count":49}]}